### Eclipse Workspace Patch 1.0
#P com.atlassian.connector.commons
Index: src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallback.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallback.java	(revision 0)
+++ src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallback.java	(revision 0)
@@ -0,0 +1,21 @@
+package com.atlassian.theplugin.commons.remoteapi.rest;
+
+import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.HttpMethod;
+
+import com.atlassian.theplugin.commons.cfg.Server;
+import com.atlassian.theplugin.commons.exception.HttpProxySettingsException;
+
+/**
+ * Interface for the callback used by AbstractHttpSession for HttpClient setup
+ * 
+ * @author Shawn Minto
+ *
+ */
+public interface HttpSessionCallback {
+
+	HttpClient getHttpClient(Server server) throws HttpProxySettingsException;
+
+	void configureHttpMethod(AbstractHttpSession session, HttpMethod method);
+	
+}

Property changes on: src\main\java\com\atlassian\theplugin\commons\remoteapi\rest\HttpSessionCallback.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallbackImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallbackImpl.java	(revision 0)
+++ src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallbackImpl.java	(revision 0)
@@ -0,0 +1,25 @@
+package com.atlassian.theplugin.commons.remoteapi.rest;
+
+import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.HttpMethod;
+
+import com.atlassian.theplugin.commons.cfg.Server;
+import com.atlassian.theplugin.commons.exception.HttpProxySettingsException;
+import com.atlassian.theplugin.commons.util.HttpClientFactory;
+
+/**
+ * Default implementation of the {@link HttpSessionCallback}
+ * 
+ * @author Shawn Minto
+ */
+public class HttpSessionCallbackImpl implements HttpSessionCallback {
+
+	public HttpClient getHttpClient(Server server) throws HttpProxySettingsException {
+		return HttpClientFactory.getClient();
+	}
+	
+	public void configureHttpMethod(AbstractHttpSession session, HttpMethod method) {
+		session.adjustHttpHeader(method);
+	}
+
+}

Property changes on: src\main\java\com\atlassian\theplugin\commons\remoteapi\rest\HttpSessionCallbackImpl.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/test/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSessionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSessionTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSessionTest.java	(revision 0)
@@ -0,0 +1,432 @@
+/**
+ * Copyright (C) 2008 Atlassian
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.atlassian.theplugin.commons.bamboo.api;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+
+import junit.framework.TestCase;
+
+import org.easymock.EasyMock;
+
+import com.atlassian.theplugin.commons.bamboo.BambooBuild;
+import com.atlassian.theplugin.commons.bamboo.BambooChangeSet;
+import com.atlassian.theplugin.commons.bamboo.BambooPlan;
+import com.atlassian.theplugin.commons.bamboo.BambooProject;
+import com.atlassian.theplugin.commons.bamboo.BuildDetails;
+import com.atlassian.theplugin.commons.bamboo.BuildStatus;
+import com.atlassian.theplugin.commons.bamboo.TestDetails;
+import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
+
+public class AutoRenewBambooSessionTest extends TestCase {
+	private BambooSession testedSession;
+	private BambooSession mockDelegate;
+	private static final String LOGIN = "login";
+	private static final char[] A_PASSWORD = "password".toCharArray();
+
+	public void setUp() throws Exception {
+        super.setUp();
+
+		mockDelegate = EasyMock.createStrictMock(BambooSession.class);
+		testedSession = new AutoRenewBambooSession("http://dupa");
+
+		Field field = AutoRenewBambooSession.class.getDeclaredField("delegate");
+		field.setAccessible(true);
+		field.set(testedSession, mockDelegate);
+
+	}
+
+    public void tearDown() throws Exception {
+        super.tearDown();
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testLogin() throws Exception {
+		mockDelegate.login(LOGIN, A_PASSWORD);
+		EasyMock.expectLastCall().andThrow(new RemoteApiLoginException(""));
+		EasyMock.replay(mockDelegate);
+
+		try {
+			testedSession.login(LOGIN, A_PASSWORD);
+			fail();
+		} catch (RemoteApiLoginException e) {
+			//expected
+		}
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testLogout() throws Exception {
+		mockDelegate.login(LOGIN, A_PASSWORD);
+		EasyMock.expectLastCall();
+		mockDelegate.logout();
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.logout();
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testListProjectNames() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listProjectNames();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listProjectNames();
+		EasyMock.expectLastCall().andReturn(Arrays.asList(new BambooProject[]{new BambooProject() {
+			public String getProjectName() {
+				return "project1";
+			}
+
+			public String getProjectKey() {
+				return "key1";
+			}
+		}, new BambooProject() {
+			public String getProjectName() {
+				return "project1";
+			}
+
+			public String getProjectKey() {
+				return "key1";
+			}
+		}, new BambooProject() {
+			public String getProjectName() {
+				return "project1";
+			}
+
+			public String getProjectKey() {
+				return "key1";
+			}
+		}}));
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		List<BambooProject> projects = testedSession.listProjectNames();
+
+		assertNotNull(projects);
+		assertEquals(3, projects.size());
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testListPlanNames() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listPlanNames();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listPlanNames();
+		EasyMock.expectLastCall().andReturn(Arrays.asList(new BambooPlan[]{new BambooPlan() {
+			public String getPlanName() {
+				return "planName1";
+			}
+			public String getPlanKey() {
+				return "planKey1";
+			}
+			public boolean isFavourite() {
+				return false;
+			}
+			public boolean isEnabled() {
+				return false;
+			}
+		}, new BambooPlan() {
+			public String getPlanName() {
+				return "planName2";
+			}
+			public String getPlanKey() {
+				return "planKey2";
+			}
+			public boolean isFavourite() {
+				return false;
+			}
+			public boolean isEnabled() {
+				return false;
+			}
+		}} ));
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		List<BambooPlan> plans = testedSession.listPlanNames();
+		assertNotNull(plans);
+		assertEquals(2, plans.size());
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testGetLatestBuildForPlan() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getLatestBuildForPlan("planKey");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getLatestBuildForPlan("planKey");
+		EasyMock.expectLastCall().andReturn(new BambooBuild() {
+			public BambooServerCfg getServer() {
+				return null;  
+			}
+
+			public String getServerUrl() {
+				return null;
+			}
+
+			public String getProjectName() {
+				return null;
+			}
+
+			public String getProjectKey() {
+				return null;
+			}
+
+			public String getProjectUrl() {
+				return null;
+			}
+
+			public String getBuildUrl() {
+				return null;
+			}
+
+			public String getBuildName() {
+				return null;
+			}
+
+			public String getBuildKey() {
+				return null;
+			}
+
+			public boolean getEnabled() {
+				return false;
+			}
+
+			public String getBuildNumber() {
+				return null;
+			}
+
+			public String getBuildResultUrl() {
+				return null;
+			}
+
+			public BuildStatus getStatus() {
+				return null;
+			}
+
+			public String getMessage() {
+				return null;
+			}
+
+			public int getTestsPassed() {
+				return 0;
+			}
+
+			public int getTestsFailed() {
+				return 0;
+			}
+
+			public Date getBuildTime() {
+				return null;
+			}
+
+			public String getBuildReason() {
+				return null;
+			}
+
+			public String getBuildRelativeBuildDate() {
+				return null;
+			}
+
+			public void setPollingTime(Date date) {
+			}
+			
+			public Date getPollingTime() {
+				return null;
+			}
+
+			public boolean isMyBuild() {
+				return false;
+			}
+		});
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		BambooBuild build = testedSession.getLatestBuildForPlan("planKey");
+		assertNotNull(build);
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testGetFavouriteUserPlans() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getFavouriteUserPlans();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getFavouriteUserPlans();
+		EasyMock.expectLastCall().andReturn(Arrays.asList(new String[] {"plan1", "plan2", "plan3"}));
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		List<String> plans = testedSession.getFavouriteUserPlans();
+		assertNotNull(plans);
+		assertEquals(3, plans.size());
+
+		EasyMock.verify(mockDelegate);
+
+	}
+
+	public void testGetBuildResultDetails() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBuildResultDetails("buildKey", "buildNumber");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBuildResultDetails("buildKey", "buildNumber");
+		EasyMock.expectLastCall().andReturn(new BuildDetails() {
+
+			public String getVcsRevisionKey() {
+				return null;
+			}
+
+			public List<TestDetails> getSuccessfulTestDetails() {
+				return null;
+			}
+
+			public List<TestDetails> getFailedTestDetails() {
+				return null;  
+			}
+
+			public List<BambooChangeSet> getCommitInfo() {
+				return null;
+			}
+		});
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		BuildDetails build = testedSession.getBuildResultDetails("buildKey", "buildNumber");
+		assertNotNull(build);
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testAddLabelToBuild() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addLabelToBuild("buildKey", "buildNumber", "label");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addLabelToBuild("buildKey", "buildNumber", "label");
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.addLabelToBuild("buildKey", "buildNumber", "label");
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testAddCommentToBuild() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addCommentToBuild("buildKey", "buildNumber", "comment");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addCommentToBuild("buildKey", "buildNumber", "comment");
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.addCommentToBuild("buildKey", "buildNumber", "comment");
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testExecuteBuild() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.executeBuild("buildKey");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.executeBuild("buildKey");
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.executeBuild("buildKey");
+
+		EasyMock.verify(mockDelegate);
+	}	
+
+	public void testGetBambooBuildNumber() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBamboBuildNumber();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBamboBuildNumber();
+		EasyMock.expectLastCall().andReturn(770);
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.getBamboBuildNumber();
+
+		EasyMock.verify(mockDelegate);
+	}
+
+
+	public void testIsLoggedIn() throws RemoteApiLoginException {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.isLoggedIn();
+		EasyMock.expectLastCall().andReturn(true);
+		mockDelegate.logout();
+		mockDelegate.isLoggedIn();
+		EasyMock.expectLastCall().andReturn(false);
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		assertTrue(testedSession.isLoggedIn());
+		testedSession.logout();
+		assertFalse(testedSession.isLoggedIn());
+
+		EasyMock.verify(mockDelegate);
+	}
+
+}

Property changes on: src\test\java\com\atlassian\theplugin\commons\bamboo\api\AutoRenewBambooSessionTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/main/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSession.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSession.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSession.java	(working copy)
@@ -16,24 +16,39 @@
 
 package com.atlassian.theplugin.commons.bamboo.api;
 
+import java.util.List;
+
+import com.atlassian.theplugin.commons.bamboo.BambooBuild;
 import com.atlassian.theplugin.commons.bamboo.BambooPlan;
 import com.atlassian.theplugin.commons.bamboo.BambooProject;
 import com.atlassian.theplugin.commons.bamboo.BuildDetails;
-import com.atlassian.theplugin.commons.bamboo.BambooBuild;
+import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerId;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
 
-import java.util.List;
-
 public class AutoRenewBambooSession implements BambooSession {
 	private final BambooSession delegate;
 	private String userName;
 	private char[] password;
 
-	public AutoRenewBambooSession(String url) throws RemoteApiException {
-		this.delegate = new BambooSessionImpl(url);
+	/**
+	 * For testing purposes
+	 * @param url
+	 * @throws RemoteApiException
+	 */
+	AutoRenewBambooSession(String url) throws RemoteApiException {
+		BambooServerCfg serverCfg = new BambooServerCfg(url, new ServerId());
+		serverCfg.setUrl(url);
+		this.delegate = new BambooSessionImpl(serverCfg, new HttpSessionCallbackImpl());
 	}
+	
+	public AutoRenewBambooSession(BambooServerCfg serverCfg, HttpSessionCallback callback) throws RemoteApiException {
+		this.delegate = new BambooSessionImpl(serverCfg, callback);
+	}
 
 	public void addCommentToBuild(String buildKey, String buildNumber, String buildComment) throws RemoteApiException {
 		try {
Index: src/main/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionImpl.java	(revision 23960)
+++ src/main/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionImpl.java	(working copy)
@@ -19,8 +19,12 @@
 import com.atlassian.theplugin.commons.BambooFileInfo;
 import com.atlassian.theplugin.commons.BambooFileInfoImpl;
 import com.atlassian.theplugin.commons.bamboo.*;
+import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerId;
 import com.atlassian.theplugin.commons.remoteapi.*;
 import com.atlassian.theplugin.commons.remoteapi.rest.AbstractHttpSession;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
 import com.atlassian.theplugin.commons.util.UrlUtil;
 import org.apache.commons.httpclient.HttpMethod;
 import org.jdom.Document;
@@ -60,16 +64,33 @@
     private String authToken;
 
     private static final String AUTHENTICATION_ERROR_MESSAGE = "User not authenticated yet, or session timed out";
+	
+    /**
+	 * For testing purposes
+	 * @param url
+	 * @throws RemoteApiException
+	 */
+	BambooSessionImpl(String url) throws RemoteApiMalformedUrlException {
+		this(createServerCfg(url), new HttpSessionCallbackImpl());
+	}
+	
+    private static BambooServerCfg createServerCfg(String url) {
+    	BambooServerCfg serverCfg = new BambooServerCfg(url, new ServerId());
+		serverCfg.setUrl(url);
+		return serverCfg;
+	}
 
-    /**
+	/**
      * Public constructor for BambooSessionImpl.
      *
-     * @param baseUrl base URL for Bamboo instance
+     * @param serverCfg The server configuration for this session
+	 * @param callback The callback needed for preparing HttpClient calls
+     * 
      * @throws com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException
      *
      */
-    public BambooSessionImpl(String baseUrl) throws RemoteApiMalformedUrlException {
-        super(baseUrl);
+    public BambooSessionImpl(BambooServerCfg serverCfg, HttpSessionCallback callback) throws RemoteApiMalformedUrlException {
+        super(serverCfg, callback);
     }
 
 
Index: src/main/java/com/atlassian/theplugin/commons/bamboo/BambooServerFacade.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/bamboo/BambooServerFacade.java	(revision 23960)
+++ src/main/java/com/atlassian/theplugin/commons/bamboo/BambooServerFacade.java	(working copy)
@@ -1,50 +1,54 @@
-/**
- * Copyright (C) 2008 Atlassian
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.commons.bamboo;
-
-import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
-import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
-import com.atlassian.theplugin.commons.remoteapi.ProductServerFacade;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-
-import java.util.Collection;
-
-public interface BambooServerFacade extends ProductServerFacade {
-    Collection<BambooProject> getProjectList(BambooServerCfg bambooServer)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-
-    Collection<BambooPlan> getPlanList(BambooServerCfg bambooServer)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-
-    Collection<BambooBuild> getSubscribedPlansResults(BambooServerCfg bambooServer)
-            throws ServerPasswordNotProvidedException;
-
-    BuildDetails getBuildDetails(BambooServerCfg bambooServer, String buildKey, String buildNumber)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-
-    void addLabelToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildComment)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-
-    void addCommentToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildComment)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-
-    void executeBuild(BambooServerCfg bambooServer, String buildKey)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-
-    byte[] getBuildLogs(BambooServerCfg server, String buildKey, String buildNumber)
-            throws ServerPasswordNotProvidedException, RemoteApiException;
-}
+/**
+ * Copyright (C) 2008 Atlassian
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.atlassian.theplugin.commons.bamboo;
+
+import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
+import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
+import com.atlassian.theplugin.commons.remoteapi.ProductServerFacade;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+
+import java.util.Collection;
+
+public interface BambooServerFacade extends ProductServerFacade {
+    Collection<BambooProject> getProjectList(BambooServerCfg bambooServer)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+
+    Collection<BambooPlan> getPlanList(BambooServerCfg bambooServer)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+
+    Collection<BambooBuild> getSubscribedPlansResults(BambooServerCfg bambooServer)
+            throws ServerPasswordNotProvidedException;
+
+    BuildDetails getBuildDetails(BambooServerCfg bambooServer, String buildKey, String buildNumber)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+
+    void addLabelToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildComment)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+
+    void addCommentToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildComment)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+
+    void executeBuild(BambooServerCfg bambooServer, String buildKey)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+
+    byte[] getBuildLogs(BambooServerCfg server, String buildKey, String buildNumber)
+            throws ServerPasswordNotProvidedException, RemoteApiException;
+    
+	public void setCallback(HttpSessionCallback callback);
+
+}
Index: src/main/java/com/atlassian/theplugin/commons/bamboo/BambooServerFacadeImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/bamboo/BambooServerFacadeImpl.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/bamboo/BambooServerFacadeImpl.java	(working copy)
@@ -1,360 +1,387 @@
-/**
- * Copyright (C) 2008 Atlassian
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.commons.bamboo;
-
-import com.atlassian.theplugin.commons.ServerType;
-import com.atlassian.theplugin.commons.SubscribedPlan;
-import com.atlassian.theplugin.commons.bamboo.api.AutoRenewBambooSession;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSession;
-import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
-import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginFailedException;
-import com.atlassian.theplugin.commons.util.Logger;
-
-import java.util.*;
-
-
-/**
- * Class used for communication wiht Bamboo Server.
- * User: sginter
- * Date: Jan 15, 2008
- * Time: 5:12:27 PM
- */
-public final class BambooServerFacadeImpl implements BambooServerFacade {
-    private Map<String, BambooSession> sessions = new WeakHashMap<String, BambooSession>();
-    private Logger loger;
-
-    private static BambooServerFacadeImpl instance = null;
-
-    private BambooServerFacadeImpl(Logger loger) {
-        this.loger = loger;
-    }                                                                                            
-
-    public static synchronized BambooServerFacade getInstance(Logger loger) {
-        if (instance == null) {
-            instance = new BambooServerFacadeImpl(loger);
-        }
-
-        return instance;
-    }
-
-    public ServerType getServerType() {
-        return ServerType.BAMBOO_SERVER;
-    }
-
-    private synchronized BambooSession getSession(BambooServerCfg server) throws RemoteApiException {
-        // @todo old server will stay on map - remove them !!!
-        String key = server.getUsername() + server.getUrl() + server.getPassword();
-        BambooSession session = sessions.get(key);
-        if (session == null) {
-            session = new AutoRenewBambooSession(server.getUrl());
-            sessions.put(key, session);
-        }
-        if (!session.isLoggedIn()) {
-            session.login(server.getUsername(), server.getPassword().toCharArray());
-            try {
-                if (session.getBamboBuildNumber() > 0) {
-                    server.setIsBamboo2(true);
-                } else {
-                    server.setIsBamboo2(false);
-                }
-            } catch (RemoteApiException e) {
-                // can not validate as Bamboo 2
-                server.setIsBamboo2(false);
-            }
-        }
-        return session;
-    }
-
-    /**
-     * Test connection to Bamboo server.
-     *
-     * @param url      Bamboo server base URL
-     * @param userName Bamboo user name
-     * @param password Bamboo password
-     * @throws RemoteApiException on failed login
-     * @see RemoteApiLoginFailedException
-     */
-    public void testServerConnection(String url, String userName, String password) throws RemoteApiException {
-        BambooSession apiHandler = new AutoRenewBambooSession(url);
-        apiHandler.login(userName, password.toCharArray());
-        apiHandler.logout();
-    }
-
-    /**
-     * List projects defined on Bamboo server.
-     *
-     * @param bambooServer Bamboo server information
-     * @return list of projects or null on error
-     * @throws ServerPasswordNotProvidedException
-     *          when invoked for Server that has not had the password set yet
-     */
-    public Collection<BambooProject> getProjectList(BambooServerCfg bambooServer) throws ServerPasswordNotProvidedException
-            , RemoteApiException {
-        try {
-            return getSession(bambooServer).listProjectNames();
-        } catch (RemoteApiException e) {
-            loger.error("Bamboo exception: " + e.getMessage(), e);
-            throw e;
-        }
-    }
-
-    /**
-     * List plans defined on Bamboo server.
-     *
-     * @param bambooServer Bamboo server information
-     * @return list of plans
-     * @throws com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException
-     *          when invoked for Server that has not had the password set yet
-     */
-    public Collection<BambooPlan> getPlanList(BambooServerCfg bambooServer)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        BambooSession api = getSession(bambooServer);
-        List<BambooPlan> plans = api.listPlanNames();
-        try {
-            List<String> favPlans = api.getFavouriteUserPlans();
-            for (String fav : favPlans) {
-                for (BambooPlan plan : plans) {
-                    if (plan.getPlanKey().equalsIgnoreCase(fav)) {
-                        ((BambooPlanData) plan).setFavourite(true);
-                        break;
-                    }
-                }
-            }
-        } catch (RemoteApiException e) {
-            // lack of favourite info is not a blocker here
-        }
-        return plans;
-    }
-
-    /**
-     * List details on subscribed plans.<p>
-     * <p/>
-     * Returns info on all subscribed plans including information about failed attempt.<p>
-     * <p/>
-     * Throws ServerPasswordNotProvidedException when invoked for Server that has not had the password set, when the server
-     * returns a meaningful exception response.
-     *
-     * @param bambooServer Bamboo server information
-     * @return results on subscribed builds
-     * @throws com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException
-     *          when invoked for Server that has not had the password set yet
-     * @see com.atlassian.theplugin.commons.bamboo.api.BambooSessionImpl#login(String, char[])
-     */
-    public Collection<BambooBuild> getSubscribedPlansResults(BambooServerCfg bambooServer)
-            throws ServerPasswordNotProvidedException {
-        Collection<BambooBuild> builds = new ArrayList<BambooBuild>();
-
-        String connectionErrorMessage;
-        BambooSession api = null;
-        try {
-            api = getSession(bambooServer);
-            connectionErrorMessage = "";
-        } catch (RemoteApiLoginFailedException e) {
-			// TODO wseliga used to be bambooServer.getIsConfigInitialized() here
-			if (bambooServer.getPassword().length() > 0) {
-                loger.error("Bamboo login exception: " + e.getMessage());
-                connectionErrorMessage = e.getMessage();
-            } else {
-                throw new ServerPasswordNotProvidedException();
-            }
-        } catch (RemoteApiException e) {
-            loger.error("Bamboo exception: " + e.getMessage());
-            connectionErrorMessage = e.getMessage();
-        }
-
-        Collection<BambooPlan> plansForServer = null;
-        try {
-            plansForServer = getPlanList(bambooServer);
-        } catch (RemoteApiException e) {
-            // can go further, no disabled info will be available
-        }
-
-        if (bambooServer.isUseFavourites()) {
-            if (plansForServer != null) {
-                for (BambooPlan bambooPlan : plansForServer) {
-                    if (bambooPlan.isFavourite()) {
-                        if (api != null && api.isLoggedIn()) {
-                            try {
-                                BambooBuild buildInfo = api.getLatestBuildForPlan(bambooPlan.getPlanKey());
-                                ((BambooBuildInfo) buildInfo).setServer(bambooServer);
-                                ((BambooBuildInfo) buildInfo).setEnabled(bambooPlan.isEnabled());
-                                builds.add(buildInfo);
-                            } catch (RemoteApiException e) {
-                                // go ahead, there are other builds
-                            }
-                        } else {
-                            builds.add(constructBuildErrorInfo(
-                                    bambooServer,
-                                    bambooPlan.getPlanKey(),
-                                    connectionErrorMessage));
-                        }
-                    }
-                }
-            }
-        } else {
-            for (SubscribedPlan plan : bambooServer.getSubscribedPlans()) {
-                if (api != null && api.isLoggedIn()) {
-                    try {
-                        BambooBuild buildInfo = api.getLatestBuildForPlan(plan.getPlanId());
-                        ((BambooBuildInfo) buildInfo).setEnabled(true);
-                        ((BambooBuildInfo) buildInfo).setServer(bambooServer);
-                        if (plansForServer != null) {
-                            for (BambooPlan bambooPlan : plansForServer) {
-                                if (plan.getPlanId().equals(bambooPlan.getPlanKey())) {
-                                    ((BambooBuildInfo) buildInfo).setEnabled(bambooPlan.isEnabled());
-                                }
-                            }
-                        }
-                        builds.add(buildInfo);
-                    } catch (RemoteApiException e) {
-                        // go ahead, there are other builds
-                    }
-                } else {
-                    builds.add(constructBuildErrorInfo(
-                            bambooServer, plan.getPlanId(), connectionErrorMessage));
-                }
-            }
-        }
-
-
-        return builds;
-    }
-
-    /**
-     * @param bambooServer
-     * @param buildKey
-     * @param buildNumber
-     * @return
-     * @throws ServerPasswordNotProvidedException
-     *
-     * @throws RemoteApiException
-     */
-    public BuildDetails getBuildDetails(BambooServerCfg bambooServer, String buildKey, String buildNumber)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        try {
-            BambooSession api = getSession(bambooServer);
-            return api.getBuildResultDetails(buildKey, buildNumber);
-        } catch (RemoteApiException e) {
-            loger.info("Bamboo exception: " + e.getMessage());
-            throw e;
-        }
-    }
-
-    /**
-     * @param bambooServer
-     * @param buildKey
-     * @param buildNumber
-     * @param buildLabel
-     * @throws ServerPasswordNotProvidedException
-     *
-     * @throws RemoteApiException
-     */
-    public void addLabelToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildLabel)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        try {
-            BambooSession api = getSession(bambooServer);
-            api.addLabelToBuild(buildKey, buildNumber, buildLabel);
-        } catch (RemoteApiException e) {
-            loger.info("Bamboo exception: " + e.getMessage());
-            throw e;
-        }
-    }
-
-    /**
-     * @param bambooServer
-     * @param buildKey
-     * @param buildNumber
-     * @param buildComment
-     * @throws ServerPasswordNotProvidedException
-     *
-     * @throws RemoteApiException
-     */
-    public void addCommentToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildComment)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        try {
-            BambooSession api = getSession(bambooServer);
-            api.addCommentToBuild(buildKey, buildNumber, buildComment);
-        } catch (RemoteApiException e) {
-            loger.info("Bamboo exception: " + e.getMessage());
-            throw e;
-        }
-    }
-
-    /**
-     * @param bambooServer
-     * @param buildKey
-     * @throws ServerPasswordNotProvidedException
-     *
-     * @throws RemoteApiException
-     */
-    public void executeBuild(BambooServerCfg bambooServer, String buildKey)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        try {
-            BambooSession api = getSession(bambooServer);
-            api.executeBuild(buildKey);
-        } catch (RemoteApiException e) {
-            loger.info("Bamboo exception: " + e.getMessage());
-            throw e;
-        }
-    }
-
-    public byte[] getBuildLogs(BambooServerCfg bambooServer, String buildKey, String buildNumber)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        try {
-            BambooSession api = getSession(bambooServer);
-            return api.getBuildLogs(buildKey, buildNumber);
-        } catch (RemoteApiException e) {
-            loger.info("Bamboo exception: " + e.getMessage());
-            throw e;
-        }
-    }
-
-    /**
-     * List plans defined on Bamboo server.
-     *
-     * @param bambooServer Bamboo server information
-     * @return list of plans or null on error
-     * @throws com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException
-     *          when invoked for Server that has not had the password set yet
-     */
-    public Collection<String> getFavouritePlans(BambooServerCfg bambooServer)
-            throws ServerPasswordNotProvidedException, RemoteApiException {
-        try {
-            return getSession(bambooServer).getFavouriteUserPlans();
-        } catch (RemoteApiException e) {
-            loger.error("Bamboo exception: " + e.getMessage());
-            throw e;
-        }
-    }
-
-
-    private BambooBuild constructBuildErrorInfo(BambooServerCfg server, String planId, String message) {
-        BambooBuildInfo buildInfo = new BambooBuildInfo();
-
-        buildInfo.setServer(server);
-        buildInfo.setServerUrl(server.getUrl());
-        buildInfo.setBuildKey(planId);
-        buildInfo.setBuildState(BuildStatus.UNKNOWN.toString());
-		buildInfo.setMessage(message);
-		buildInfo.setPollingTime(new Date());
-
-		return buildInfo;
-	}
-
-}
+/**
+ * Copyright (C) 2008 Atlassian
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.atlassian.theplugin.commons.bamboo;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
+
+import com.atlassian.theplugin.commons.ServerType;
+import com.atlassian.theplugin.commons.SubscribedPlan;
+import com.atlassian.theplugin.commons.bamboo.api.AutoRenewBambooSession;
+import com.atlassian.theplugin.commons.bamboo.api.BambooSession;
+import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerId;
+import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginFailedException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
+import com.atlassian.theplugin.commons.util.Logger;
+
+
+/**
+ * Class used for communication wiht Bamboo Server.
+ * User: sginter
+ * Date: Jan 15, 2008
+ * Time: 5:12:27 PM
+ */
+public final class BambooServerFacadeImpl implements BambooServerFacade {
+    private Map<String, BambooSession> sessions = new WeakHashMap<String, BambooSession>();
+    private Logger loger;
+
+    private static BambooServerFacadeImpl instance = null;
+
+    private HttpSessionCallback callback;
+    
+    private BambooServerFacadeImpl(Logger loger) {
+        this.loger = loger;
+        this.callback = new HttpSessionCallbackImpl();
+    }                                                                                            
+
+    public static synchronized BambooServerFacade getInstance(Logger loger) {
+        if (instance == null) {
+            instance = new BambooServerFacadeImpl(loger);
+        }
+
+        return instance;
+    }
+
+    public ServerType getServerType() {
+        return ServerType.BAMBOO_SERVER;
+    }
+
+    private synchronized BambooSession getSession(BambooServerCfg server) throws RemoteApiException {
+        // @todo old server will stay on map - remove them !!!
+        String key = server.getUsername() + server.getUrl() + server.getPassword();
+        BambooSession session = sessions.get(key);
+        if (session == null) {
+            session = new AutoRenewBambooSession(server, callback);
+            sessions.put(key, session);
+        }
+        if (!session.isLoggedIn()) {
+            session.login(server.getUsername(), server.getPassword().toCharArray());
+            try {
+                if (session.getBamboBuildNumber() > 0) {
+                    server.setIsBamboo2(true);
+                } else {
+                    server.setIsBamboo2(false);
+                }
+            } catch (RemoteApiException e) {
+                // can not validate as Bamboo 2
+                server.setIsBamboo2(false);
+            }
+        }
+        return session;
+    }
+
+    /**
+     * For testing Only
+     * @see com.atlassian.theplugin.commons.remoteapi.ProductServerFacade#testServerConnection(java.lang.String, java.lang.String, java.lang.String)
+     */
+    public void testServerConnection(String url, String userName, String password) throws RemoteApiException {
+    	BambooServerCfg serverCfg = new BambooServerCfg(url, new ServerId());
+    	serverCfg.setUrl(url);
+    	serverCfg.setUsername(userName);
+    	serverCfg.setPassword(password);
+    	testServerConnection(serverCfg);
+    }
+    
+	/**
+     * Test connection to Bamboo server.
+     *
+     * @param serverCfg The configuration for the server that we want to test the connectio for
+     * 
+     * @throws RemoteApiException on failed login
+     * @see RemoteApiLoginFailedException
+     */
+    public void testServerConnection(ServerCfg serverCfg) throws RemoteApiException {
+    	assert(serverCfg instanceof BambooServerCfg);
+    	BambooSession apiHandler = new AutoRenewBambooSession((BambooServerCfg)serverCfg, callback);
+        apiHandler.login(serverCfg.getUsername(), serverCfg.getPassword().toCharArray());
+        apiHandler.logout();
+    }
+
+    /**
+     * List projects defined on Bamboo server.
+     *
+     * @param bambooServer Bamboo server information
+     * @return list of projects or null on error
+     * @throws ServerPasswordNotProvidedException
+     *          when invoked for Server that has not had the password set yet
+     */
+    public Collection<BambooProject> getProjectList(BambooServerCfg bambooServer) throws ServerPasswordNotProvidedException
+            , RemoteApiException {
+        try {
+            return getSession(bambooServer).listProjectNames();
+        } catch (RemoteApiException e) {
+            loger.error("Bamboo exception: " + e.getMessage(), e);
+            throw e;
+        }
+    }
+
+    /**
+     * List plans defined on Bamboo server.
+     *
+     * @param bambooServer Bamboo server information
+     * @return list of plans
+     * @throws com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException
+     *          when invoked for Server that has not had the password set yet
+     */
+    public Collection<BambooPlan> getPlanList(BambooServerCfg bambooServer)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        BambooSession api = getSession(bambooServer);
+        List<BambooPlan> plans = api.listPlanNames();
+        try {
+            List<String> favPlans = api.getFavouriteUserPlans();
+            for (String fav : favPlans) {
+                for (BambooPlan plan : plans) {
+                    if (plan.getPlanKey().equalsIgnoreCase(fav)) {
+                        ((BambooPlanData) plan).setFavourite(true);
+                        break;
+                    }
+                }
+            }
+        } catch (RemoteApiException e) {
+            // lack of favourite info is not a blocker here
+        }
+        return plans;
+    }
+
+    /**
+     * List details on subscribed plans.<p>
+     * <p/>
+     * Returns info on all subscribed plans including information about failed attempt.<p>
+     * <p/>
+     * Throws ServerPasswordNotProvidedException when invoked for Server that has not had the password set, when the server
+     * returns a meaningful exception response.
+     *
+     * @param bambooServer Bamboo server information
+     * @return results on subscribed builds
+     * @throws com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException
+     *          when invoked for Server that has not had the password set yet
+     * @see com.atlassian.theplugin.commons.bamboo.api.BambooSessionImpl#login(String, char[])
+     */
+    public Collection<BambooBuild> getSubscribedPlansResults(BambooServerCfg bambooServer)
+            throws ServerPasswordNotProvidedException {
+        Collection<BambooBuild> builds = new ArrayList<BambooBuild>();
+
+        String connectionErrorMessage;
+        BambooSession api = null;
+        try {
+            api = getSession(bambooServer);
+            connectionErrorMessage = "";
+        } catch (RemoteApiLoginFailedException e) {
+			// TODO wseliga used to be bambooServer.getIsConfigInitialized() here
+			if (bambooServer.getPassword().length() > 0) {
+                loger.error("Bamboo login exception: " + e.getMessage());
+                connectionErrorMessage = e.getMessage();
+            } else {
+                throw new ServerPasswordNotProvidedException();
+            }
+        } catch (RemoteApiException e) {
+            loger.error("Bamboo exception: " + e.getMessage());
+            connectionErrorMessage = e.getMessage();
+        }
+
+        Collection<BambooPlan> plansForServer = null;
+        try {
+            plansForServer = getPlanList(bambooServer);
+        } catch (RemoteApiException e) {
+            // can go further, no disabled info will be available
+        }
+
+        if (bambooServer.isUseFavourites()) {
+            if (plansForServer != null) {
+                for (BambooPlan bambooPlan : plansForServer) {
+                    if (bambooPlan.isFavourite()) {
+                        if (api != null && api.isLoggedIn()) {
+                            try {
+                                BambooBuild buildInfo = api.getLatestBuildForPlan(bambooPlan.getPlanKey());
+                                ((BambooBuildInfo) buildInfo).setServer(bambooServer);
+                                ((BambooBuildInfo) buildInfo).setEnabled(bambooPlan.isEnabled());
+                                builds.add(buildInfo);
+                            } catch (RemoteApiException e) {
+                                // go ahead, there are other builds
+                            }
+                        } else {
+                            builds.add(constructBuildErrorInfo(
+                                    bambooServer,
+                                    bambooPlan.getPlanKey(),
+                                    connectionErrorMessage));
+                        }
+                    }
+                }
+            }
+        } else {
+            for (SubscribedPlan plan : bambooServer.getSubscribedPlans()) {
+                if (api != null && api.isLoggedIn()) {
+                    try {
+                        BambooBuild buildInfo = api.getLatestBuildForPlan(plan.getPlanId());
+                        ((BambooBuildInfo) buildInfo).setEnabled(true);
+                        ((BambooBuildInfo) buildInfo).setServer(bambooServer);
+                        if (plansForServer != null) {
+                            for (BambooPlan bambooPlan : plansForServer) {
+                                if (plan.getPlanId().equals(bambooPlan.getPlanKey())) {
+                                    ((BambooBuildInfo) buildInfo).setEnabled(bambooPlan.isEnabled());
+                                }
+                            }
+                        }
+                        builds.add(buildInfo);
+                    } catch (RemoteApiException e) {
+                        // go ahead, there are other builds
+                    }
+                } else {
+                    builds.add(constructBuildErrorInfo(
+                            bambooServer, plan.getPlanId(), connectionErrorMessage));
+                }
+            }
+        }
+
+
+        return builds;
+    }
+
+    /**
+     * @param bambooServer
+     * @param buildKey
+     * @param buildNumber
+     * @return
+     * @throws ServerPasswordNotProvidedException
+     *
+     * @throws RemoteApiException
+     */
+    public BuildDetails getBuildDetails(BambooServerCfg bambooServer, String buildKey, String buildNumber)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        try {
+            BambooSession api = getSession(bambooServer);
+            return api.getBuildResultDetails(buildKey, buildNumber);
+        } catch (RemoteApiException e) {
+            loger.info("Bamboo exception: " + e.getMessage());
+            throw e;
+        }
+    }
+
+    /**
+     * @param bambooServer
+     * @param buildKey
+     * @param buildNumber
+     * @param buildLabel
+     * @throws ServerPasswordNotProvidedException
+     *
+     * @throws RemoteApiException
+     */
+    public void addLabelToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildLabel)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        try {
+            BambooSession api = getSession(bambooServer);
+            api.addLabelToBuild(buildKey, buildNumber, buildLabel);
+        } catch (RemoteApiException e) {
+            loger.info("Bamboo exception: " + e.getMessage());
+            throw e;
+        }
+    }
+
+    /**
+     * @param bambooServer
+     * @param buildKey
+     * @param buildNumber
+     * @param buildComment
+     * @throws ServerPasswordNotProvidedException
+     *
+     * @throws RemoteApiException
+     */
+    public void addCommentToBuild(BambooServerCfg bambooServer, String buildKey, String buildNumber, String buildComment)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        try {
+            BambooSession api = getSession(bambooServer);
+            api.addCommentToBuild(buildKey, buildNumber, buildComment);
+        } catch (RemoteApiException e) {
+            loger.info("Bamboo exception: " + e.getMessage());
+            throw e;
+        }
+    }
+
+    /**
+     * @param bambooServer
+     * @param buildKey
+     * @throws ServerPasswordNotProvidedException
+     *
+     * @throws RemoteApiException
+     */
+    public void executeBuild(BambooServerCfg bambooServer, String buildKey)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        try {
+            BambooSession api = getSession(bambooServer);
+            api.executeBuild(buildKey);
+        } catch (RemoteApiException e) {
+            loger.info("Bamboo exception: " + e.getMessage());
+            throw e;
+        }
+    }
+
+    public byte[] getBuildLogs(BambooServerCfg bambooServer, String buildKey, String buildNumber)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        try {
+            BambooSession api = getSession(bambooServer);
+            return api.getBuildLogs(buildKey, buildNumber);
+        } catch (RemoteApiException e) {
+            loger.info("Bamboo exception: " + e.getMessage());
+            throw e;
+        }
+    }
+
+    /**
+     * List plans defined on Bamboo server.
+     *
+     * @param bambooServer Bamboo server information
+     * @return list of plans or null on error
+     * @throws com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException
+     *          when invoked for Server that has not had the password set yet
+     */
+    public Collection<String> getFavouritePlans(BambooServerCfg bambooServer)
+            throws ServerPasswordNotProvidedException, RemoteApiException {
+        try {
+            return getSession(bambooServer).getFavouriteUserPlans();
+        } catch (RemoteApiException e) {
+            loger.error("Bamboo exception: " + e.getMessage());
+            throw e;
+        }
+    }
+
+
+    private BambooBuild constructBuildErrorInfo(BambooServerCfg server, String planId, String message) {
+        BambooBuildInfo buildInfo = new BambooBuildInfo();
+
+        buildInfo.setServer(server);
+        buildInfo.setServerUrl(server.getUrl());
+        buildInfo.setBuildKey(planId);
+        buildInfo.setBuildState(BuildStatus.UNKNOWN.toString());
+		buildInfo.setMessage(message);
+		buildInfo.setPollingTime(new Date());
+
+		return buildInfo;
+	}
+    
+	public void setCallback(HttpSessionCallback callback) {
+		this.callback = callback;
+	}
+}
Index: src/main/java/com/atlassian/theplugin/commons/crucible/api/rest/CrucibleSessionImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/crucible/api/rest/CrucibleSessionImpl.java	(revision 23960)
+++ src/main/java/com/atlassian/theplugin/commons/crucible/api/rest/CrucibleSessionImpl.java	(working copy)
@@ -16,12 +16,18 @@
 
 package com.atlassian.theplugin.commons.crucible.api.rest;
 
-import com.atlassian.theplugin.commons.VersionedVirtualFile;
-import com.atlassian.theplugin.commons.crucible.ValueNotYetInitialized;
-import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
-import com.atlassian.theplugin.commons.crucible.api.model.*;
-import com.atlassian.theplugin.commons.remoteapi.*;
-import com.atlassian.theplugin.commons.remoteapi.rest.AbstractHttpSession;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.httpclient.Header;
 import org.apache.commons.httpclient.HttpMethod;
@@ -30,12 +36,40 @@
 import org.jdom.JDOMException;
 import org.jdom.xpath.XPath;
 
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.net.MalformedURLException;
-import java.net.URLEncoder;
-import java.net.UnknownHostException;
-import java.util.*;
+import com.atlassian.theplugin.commons.VersionedVirtualFile;
+import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerId;
+import com.atlassian.theplugin.commons.crucible.ValueNotYetInitialized;
+import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
+import com.atlassian.theplugin.commons.crucible.api.model.Action;
+import com.atlassian.theplugin.commons.crucible.api.model.Comment;
+import com.atlassian.theplugin.commons.crucible.api.model.CrucibleFileInfo;
+import com.atlassian.theplugin.commons.crucible.api.model.CrucibleVersionInfo;
+import com.atlassian.theplugin.commons.crucible.api.model.CustomFieldDef;
+import com.atlassian.theplugin.commons.crucible.api.model.CustomFilter;
+import com.atlassian.theplugin.commons.crucible.api.model.GeneralComment;
+import com.atlassian.theplugin.commons.crucible.api.model.GeneralCommentBean;
+import com.atlassian.theplugin.commons.crucible.api.model.PermId;
+import com.atlassian.theplugin.commons.crucible.api.model.PredefinedFilter;
+import com.atlassian.theplugin.commons.crucible.api.model.Project;
+import com.atlassian.theplugin.commons.crucible.api.model.Repository;
+import com.atlassian.theplugin.commons.crucible.api.model.Review;
+import com.atlassian.theplugin.commons.crucible.api.model.ReviewBean;
+import com.atlassian.theplugin.commons.crucible.api.model.Reviewer;
+import com.atlassian.theplugin.commons.crucible.api.model.State;
+import com.atlassian.theplugin.commons.crucible.api.model.SvnRepository;
+import com.atlassian.theplugin.commons.crucible.api.model.User;
+import com.atlassian.theplugin.commons.crucible.api.model.VersionedComment;
+import com.atlassian.theplugin.commons.crucible.api.model.VersionedCommentBean;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginFailedException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
+import com.atlassian.theplugin.commons.remoteapi.rest.AbstractHttpSession;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
 
 /**
  * Communication stub for Crucible REST API.
@@ -88,16 +122,32 @@
 	private Map<String, SvnRepository> repositories = new HashMap<String, SvnRepository>();
 	private Map<String, List<CustomFieldDef>> metricsDefinitions = new HashMap<String, List<CustomFieldDef>>();
 
-
 	/**
+	 * For testing purposes
+	 * @param url
+	 * @throws RemoteApiException
+	 */
+	CrucibleSessionImpl(String url) throws RemoteApiException {
+		this(createServerCfg(url), new HttpSessionCallbackImpl());
+	}
+	
+    private static CrucibleServerCfg createServerCfg(String url) {
+    	CrucibleServerCfg serverCfg = new CrucibleServerCfg(url, new ServerId());
+		serverCfg.setUrl(url);
+		return serverCfg;
+	}
+	
+	/**
 	 * Public constructor for CrucibleSessionImpl.
-	 *
-	 * @param url base url
+	 * 
+	 * @param serverCfg The server fisheye configuration for this session
+	 * @param callback The callback needed for preparing HttpClient calls
+	 * 
 	 * @throws com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException
 	 *
 	 */
-	public CrucibleSessionImpl(String url) throws RemoteApiMalformedUrlException {
-		super(url);
+	public CrucibleSessionImpl(ServerCfg serverCfg, HttpSessionCallback callback) throws RemoteApiMalformedUrlException {
+		super(serverCfg, callback);
 	}
 
 	public void login(String username, String aPassword) throws RemoteApiLoginException {
@@ -1373,6 +1423,7 @@
 	protected void adjustHttpHeader(HttpMethod method) {
 		method.addRequestHeader(new Header("Authorization", getAuthHeaderValue()));
 	}
+	
 
 	@Override
 	protected void preprocessResult(Document doc) throws JDOMException, RemoteApiSessionExpiredException {
Index: src/main/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacade.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacade.java	(revision 23960)
+++ src/main/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacade.java	(working copy)
@@ -21,6 +21,7 @@
 import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
 import com.atlassian.theplugin.commons.remoteapi.ProductServerFacade;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
 
 import java.util.List;
 import java.util.Set;
@@ -164,4 +165,6 @@
 	List<CustomFieldDef> getMetrics(CrucibleServerCfg server, int version)
 			throws RemoteApiException, ServerPasswordNotProvidedException;
 
+	public void setCallback(HttpSessionCallback callback);
+
 }
Index: src/main/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeImpl.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeImpl.java	(working copy)
@@ -16,28 +16,52 @@
 
 package com.atlassian.theplugin.commons.crucible;
 
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import com.atlassian.theplugin.commons.ServerType;
 import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerId;
 import com.atlassian.theplugin.commons.crucible.api.CrucibleLoginException;
 import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
-import com.atlassian.theplugin.commons.crucible.api.model.*;
+import com.atlassian.theplugin.commons.crucible.api.model.Comment;
+import com.atlassian.theplugin.commons.crucible.api.model.CommentBean;
+import com.atlassian.theplugin.commons.crucible.api.model.CrucibleFileInfo;
+import com.atlassian.theplugin.commons.crucible.api.model.CrucibleUserCache;
+import com.atlassian.theplugin.commons.crucible.api.model.CrucibleUserCacheImpl;
+import com.atlassian.theplugin.commons.crucible.api.model.CustomFieldDef;
+import com.atlassian.theplugin.commons.crucible.api.model.CustomFilter;
+import com.atlassian.theplugin.commons.crucible.api.model.GeneralComment;
+import com.atlassian.theplugin.commons.crucible.api.model.GeneralCommentBean;
+import com.atlassian.theplugin.commons.crucible.api.model.PermId;
+import com.atlassian.theplugin.commons.crucible.api.model.PredefinedFilter;
+import com.atlassian.theplugin.commons.crucible.api.model.Project;
+import com.atlassian.theplugin.commons.crucible.api.model.Repository;
+import com.atlassian.theplugin.commons.crucible.api.model.Review;
+import com.atlassian.theplugin.commons.crucible.api.model.Reviewer;
+import com.atlassian.theplugin.commons.crucible.api.model.SvnRepository;
+import com.atlassian.theplugin.commons.crucible.api.model.User;
+import com.atlassian.theplugin.commons.crucible.api.model.VersionedComment;
+import com.atlassian.theplugin.commons.crucible.api.model.VersionedCommentBean;
 import com.atlassian.theplugin.commons.crucible.api.rest.CrucibleSessionImpl;
 import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 public final class CrucibleServerFacadeImpl implements CrucibleServerFacade {
 	private Map<String, CrucibleSession> sessions = new HashMap<String, CrucibleSession>();
 
 	private static CrucibleServerFacadeImpl instance;
 	private CrucibleUserCache userCache;
-
+	private HttpSessionCallback callback;
+	
 	private CrucibleServerFacadeImpl(CrucibleUserCache userCache) {
 		this.userCache = userCache;
+		this.callback = new HttpSessionCallbackImpl();
 	}
 
 	public static synchronized CrucibleServerFacade getInstance() {
@@ -61,7 +85,7 @@
 		CrucibleSession session = sessions.get(key);
 		if (session == null) {
 			try {
-				session = new CrucibleSessionImpl(server.getUrl());
+				session = new CrucibleSessionImpl(server, callback);
 				sessions.put(key, session);
 			} catch (RemoteApiException e) {
 				if (server.getPassword().length() > 0) {
@@ -88,17 +112,28 @@
 	}
 
 	/**
-	 * @param serverUrl @see
-	 *                  com.atlassian.theplugin.commons.crucible.remoteapi.soap.CrucibleSessionImpl#constructor(String baseUrl)
-	 * @param userName
-	 * @param password
+     * For testing Only
+     * @see com.atlassian.theplugin.commons.remoteapi.ProductServerFacade#testServerConnection(java.lang.String, java.lang.String, java.lang.String)
+     */
+    public void testServerConnection(String url, String userName, String password) throws RemoteApiException {
+    	CrucibleServerCfg serverCfg = new CrucibleServerCfg(url, new ServerId());
+    	serverCfg.setUrl(url);
+    	serverCfg.setUsername(userName);
+    	serverCfg.setPassword(password);
+    	testServerConnection(serverCfg);
+    }
+	
+	/**
+	 * @param serverCfg The configuration for the server that we want to test the connectio for
+	 *      
 	 * @throws com.atlassian.theplugin.commons.crucible.api.CrucibleException
 	 *
 	 */
-	public void testServerConnection(String serverUrl, String userName, String password) throws RemoteApiException {
+	public void testServerConnection(ServerCfg serverCfg) throws RemoteApiException {
+		assert(serverCfg instanceof CrucibleServerCfg);
 		CrucibleSession session = null;
-		session = new CrucibleSessionImpl(serverUrl);
-		session.login(userName, password);
+		session = new CrucibleSessionImpl(serverCfg, callback);
+		session.login(serverCfg.getUsername(), serverCfg.getPassword());
 		try {
 			session.getServerVersion();
 		} catch (RemoteApiException e) {
@@ -462,4 +497,7 @@
 //		return session.getAllReviewsForFile(repoName, path, true);
 //	}
 
+	public void setCallback(HttpSessionCallback callback) {
+		this.callback = callback;
+	}
 }
Index: src/main/java/com/atlassian/theplugin/commons/fisheye/api/rest/FishEyeRestSession.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/fisheye/api/rest/FishEyeRestSession.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/fisheye/api/rest/FishEyeRestSession.java	(working copy)
@@ -1,162 +1,190 @@
-/**
- * Copyright (C) 2008 Atlassian
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.atlassian.theplugin.commons.fisheye.api.rest;
-
-import com.atlassian.theplugin.commons.fisheye.api.FishEyeSession;
-import com.atlassian.theplugin.commons.remoteapi.*;
-import com.atlassian.theplugin.commons.remoteapi.rest.AbstractHttpSession;
-import com.atlassian.theplugin.commons.util.LoggerImpl;
-import com.atlassian.theplugin.commons.util.UrlUtil;
-import org.apache.commons.httpclient.HttpMethod;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.JDOMException;
-import org.jdom.xpath.XPath;
-
-import java.io.IOException;
-import java.net.MalformedURLException;
-import java.net.UnknownHostException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class FishEyeRestSession extends AbstractHttpSession implements FishEyeSession {
-	static final String REST_BASE_URL = "/api/rest/";
-	static final String LOGIN_ACTION = REST_BASE_URL + "login";
-	static final String LOGOUT_ACTION = REST_BASE_URL + "logout";
-	static final String LIST_REPOSITORIES_ACTION = REST_BASE_URL + "repositories";
-	private String authToken;
-
-	/**
-	 * Public constructor for AbstractHttpSession
-	 *
-	 * @param baseUrl base URL for server instance
-	 * @throws com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException
-	 *          for malformed url
-	 */
-	public FishEyeRestSession(String baseUrl) throws RemoteApiMalformedUrlException {
-		super(baseUrl);		
-	}
-
-	@Override
-	protected void adjustHttpHeader(final HttpMethod method) {
-	}
-
-	@Override
-	protected void preprocessResult(final Document doc) throws JDOMException, RemoteApiSessionExpiredException {
-	}
-
-	
-	public void login(final String name, char[] aPassword) throws RemoteApiLoginException {
-		String loginUrl;
-
-		if (name == null || aPassword == null) {
-			throw new RemoteApiLoginException("Corrupted configuration. Username or Password null");
-		}
-		loginUrl = baseUrl + LOGIN_ACTION + "?username=" + UrlUtil.encodeUrl(name) + "&password="
-				+ UrlUtil.encodeUrl(String.valueOf(aPassword));
-
-
-		try {
-			Document doc = retrieveGetResponse(loginUrl);
-			String exception = getExceptionMessages(doc);
-			if (null != exception) {
-				throw new RemoteApiLoginFailedException(exception);
-			}
-
-			@SuppressWarnings("unchecked")
-			final List<Element> elements = XPath.newInstance("/response/string").selectNodes(doc);
-			if (elements == null || elements.size() == 0) {
-				throw new RemoteApiLoginException("Server did not return any authentication token");
-			}
-			if (elements.size() != 1) {
-				throw new RemoteApiLoginException("Server returned unexpected number of authentication tokens ("
-						+ elements.size() + ")");
-			}
-			this.authToken = elements.get(0).getText();
-		} catch (MalformedURLException e) {
-			throw new RemoteApiLoginException("Malformed server URL: " + baseUrl, e);
-		} catch (UnknownHostException e) {
-			throw new RemoteApiLoginException("Unknown host: " + e.getMessage(), e);
-		} catch (IOException e) {
-			throw new RemoteApiLoginException(e.getMessage(), e);
-		} catch (JDOMException e) {
-			throw new RemoteApiLoginException("Server returned malformed response", e);
-		} catch (RemoteApiSessionExpiredException e) {
-			throw new RemoteApiLoginException("Session expired", e);
-		} catch (IllegalArgumentException e) {
-			throw new RemoteApiLoginException("Malformed server URL: " + baseUrl, e);
-		}
-	}
-
-	 private static String getExceptionMessages(Document doc) throws JDOMException {
-		 if (doc.getRootElement() != null && doc.getRootElement().getName().equals("error")) {
-			 return doc.getRootElement().getText();
-		 }
-
-		 return null;
-	 }
-	public void logout() {
-		        if (!isLoggedIn()) {
-            return;
-        }
-
-        try {
-            String logoutUrl = baseUrl + LOGOUT_ACTION + "?auth=" + UrlUtil.encodeUrl(authToken);
-            retrieveGetResponse(logoutUrl);
-        } catch (IOException e) {
-            LoggerImpl.getInstance().error("Exception encountered while logout:" + e.getMessage(), e);
-        } catch (JDOMException e) {
-            LoggerImpl.getInstance().error("Exception encountered while logout:" + e.getMessage(), e);
-        } catch (RemoteApiSessionExpiredException e) {
-            LoggerImpl.getInstance().debug("Exception encountered while logout:" + e.getMessage(), e);
-        }
-
-        authToken = null;
-        client = null;				
-	}
-
-	public boolean isLoggedIn() {
-		return authToken != null;  //To change body of implemented methods use File | Settings | File Templates.
-	}
-
-	public List<String> getRepositories()  throws RemoteApiException {		
-		if (!isLoggedIn()) {
-			throw new IllegalStateException("Calling method without calling login() first");
-		}
-
-		String requestUrl = baseUrl + LIST_REPOSITORIES_ACTION;
-		try {
-			Document doc = retrieveGetResponse(requestUrl);
-
-			XPath xpath = XPath.newInstance("/response/string");
-			@SuppressWarnings("unchecked")
-			List<Element> elements = xpath.selectNodes(doc);
-			List<String> myRepositories = new ArrayList<String>();
-
-			if (elements != null && !elements.isEmpty()) {
-				for (Element element : elements) {
-					myRepositories.add(element.getText());
-				}
-			}
-			return myRepositories;
-		} catch (IOException e) {
-			throw new RemoteApiException(baseUrl + ": " + e.getMessage(), e);
-		} catch (JDOMException e) {
-			throw new RemoteApiException(baseUrl + ": Server returned malformed response", e);
-		}
-	}
-	
-}
+/**
+ * Copyright (C) 2008 Atlassian
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.atlassian.theplugin.commons.fisheye.api.rest;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.UnknownHostException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.httpclient.HttpMethod;
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.JDOMException;
+import org.jdom.xpath.XPath;
+
+import com.atlassian.theplugin.commons.cfg.FishEyeServer;
+import com.atlassian.theplugin.commons.cfg.FishEyeServerCfg;
+import com.atlassian.theplugin.commons.cfg.Server;
+import com.atlassian.theplugin.commons.cfg.ServerId;
+import com.atlassian.theplugin.commons.fisheye.api.FishEyeSession;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginFailedException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
+import com.atlassian.theplugin.commons.remoteapi.rest.AbstractHttpSession;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
+import com.atlassian.theplugin.commons.util.LoggerImpl;
+import com.atlassian.theplugin.commons.util.UrlUtil;
+
+public class FishEyeRestSession extends AbstractHttpSession implements FishEyeSession {
+	static final String REST_BASE_URL = "/api/rest/";
+	static final String LOGIN_ACTION = REST_BASE_URL + "login";
+	static final String LOGOUT_ACTION = REST_BASE_URL + "logout";
+	static final String LIST_REPOSITORIES_ACTION = REST_BASE_URL + "repositories";
+	private String authToken;
+
+	/**
+	 * For testing purposes
+	 * @param url
+	 * @throws RemoteApiException
+	 */
+	FishEyeRestSession(String url) throws RemoteApiMalformedUrlException {
+		this(createServerCfg(url), new HttpSessionCallbackImpl());
+	}
+	
+    private static FishEyeServer createServerCfg(String url) {
+    	FishEyeServerCfg serverCfg = new FishEyeServerCfg(url, new ServerId());
+		serverCfg.setUrl(url);
+		return serverCfg;
+	}
+	
+	/**
+	 * Public constructor for AbstractHttpSession
+	 *
+	 * @param serverCfg The server configuration for this session
+	 * @param callback The callback needed for preparing HttpClient calls
+	 * 
+	 * @throws com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException
+	 *          for malformed url
+	 */
+	public FishEyeRestSession(Server server, HttpSessionCallback callback) throws RemoteApiMalformedUrlException {
+		super(server, callback);		
+	}
+
+	@Override
+	protected void adjustHttpHeader(final HttpMethod method) {
+	}
+
+	@Override
+	protected void preprocessResult(final Document doc) throws JDOMException, RemoteApiSessionExpiredException {
+	}
+
+	
+	public void login(final String name, char[] aPassword) throws RemoteApiLoginException {
+		String loginUrl;
+
+		if (name == null || aPassword == null) {
+			throw new RemoteApiLoginException("Corrupted configuration. Username or Password null");
+		}
+		loginUrl = baseUrl + LOGIN_ACTION + "?username=" + UrlUtil.encodeUrl(name) + "&password="
+				+ UrlUtil.encodeUrl(String.valueOf(aPassword));
+
+
+		try {
+			Document doc = retrieveGetResponse(loginUrl);
+			String exception = getExceptionMessages(doc);
+			if (null != exception) {
+				throw new RemoteApiLoginFailedException(exception);
+			}
+
+			@SuppressWarnings("unchecked")
+			final List<Element> elements = XPath.newInstance("/response/string").selectNodes(doc);
+			if (elements == null || elements.size() == 0) {
+				throw new RemoteApiLoginException("Server did not return any authentication token");
+			}
+			if (elements.size() != 1) {
+				throw new RemoteApiLoginException("Server returned unexpected number of authentication tokens ("
+						+ elements.size() + ")");
+			}
+			this.authToken = elements.get(0).getText();
+		} catch (MalformedURLException e) {
+			throw new RemoteApiLoginException("Malformed server URL: " + baseUrl, e);
+		} catch (UnknownHostException e) {
+			throw new RemoteApiLoginException("Unknown host: " + e.getMessage(), e);
+		} catch (IOException e) {
+			throw new RemoteApiLoginException(e.getMessage(), e);
+		} catch (JDOMException e) {
+			throw new RemoteApiLoginException("Server returned malformed response", e);
+		} catch (RemoteApiSessionExpiredException e) {
+			throw new RemoteApiLoginException("Session expired", e);
+		} catch (IllegalArgumentException e) {
+			throw new RemoteApiLoginException("Malformed server URL: " + baseUrl, e);
+		}
+	}
+
+	 private static String getExceptionMessages(Document doc) throws JDOMException {
+		 if (doc.getRootElement() != null && doc.getRootElement().getName().equals("error")) {
+			 return doc.getRootElement().getText();
+		 }
+
+		 return null;
+	 }
+	public void logout() {
+		        if (!isLoggedIn()) {
+            return;
+        }
+
+        try {
+            String logoutUrl = baseUrl + LOGOUT_ACTION + "?auth=" + UrlUtil.encodeUrl(authToken);
+            retrieveGetResponse(logoutUrl);
+        } catch (IOException e) {
+            LoggerImpl.getInstance().error("Exception encountered while logout:" + e.getMessage(), e);
+        } catch (JDOMException e) {
+            LoggerImpl.getInstance().error("Exception encountered while logout:" + e.getMessage(), e);
+        } catch (RemoteApiSessionExpiredException e) {
+            LoggerImpl.getInstance().debug("Exception encountered while logout:" + e.getMessage(), e);
+        }
+
+        authToken = null;
+        client = null;				
+	}
+
+	public boolean isLoggedIn() {
+		return authToken != null;  //To change body of implemented methods use File | Settings | File Templates.
+	}
+
+	public List<String> getRepositories()  throws RemoteApiException {		
+		if (!isLoggedIn()) {
+			throw new IllegalStateException("Calling method without calling login() first");
+		}
+
+		String requestUrl = baseUrl + LIST_REPOSITORIES_ACTION;
+		try {
+			Document doc = retrieveGetResponse(requestUrl);
+
+			XPath xpath = XPath.newInstance("/response/string");
+			@SuppressWarnings("unchecked")
+			List<Element> elements = xpath.selectNodes(doc);
+			List<String> myRepositories = new ArrayList<String>();
+
+			if (elements != null && !elements.isEmpty()) {
+				for (Element element : elements) {
+					myRepositories.add(element.getText());
+				}
+			}
+			return myRepositories;
+		} catch (IOException e) {
+			throw new RemoteApiException(baseUrl + ": " + e.getMessage(), e);
+		} catch (JDOMException e) {
+			throw new RemoteApiException(baseUrl + ": Server returned malformed response", e);
+		}
+	}
+	
+}
Index: src/main/java/com/atlassian/theplugin/commons/fisheye/FishEyeServerFacade.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/fisheye/FishEyeServerFacade.java	(revision 23960)
+++ src/main/java/com/atlassian/theplugin/commons/fisheye/FishEyeServerFacade.java	(working copy)
@@ -1,31 +1,34 @@
-/**
- * Copyright (C) 2008 Atlassian
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.atlassian.theplugin.commons.fisheye;
-
-import com.atlassian.theplugin.commons.cfg.FishEyeServer;
-import com.atlassian.theplugin.commons.remoteapi.ProductServerFacade;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-
-import java.util.Collection;
-
-/**
- * User: pmaruszak
- */
-public interface FishEyeServerFacade extends ProductServerFacade {
-	
-	Collection<String> getRepositories(final FishEyeServer server) throws RemoteApiException;
-
-}
+/**
+ * Copyright (C) 2008 Atlassian
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.atlassian.theplugin.commons.fisheye;
+
+import com.atlassian.theplugin.commons.cfg.FishEyeServer;
+import com.atlassian.theplugin.commons.remoteapi.ProductServerFacade;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+
+import java.util.Collection;
+
+/**
+ * User: pmaruszak
+ */
+public interface FishEyeServerFacade extends ProductServerFacade {
+	
+	Collection<String> getRepositories(final FishEyeServer server) throws RemoteApiException;
+
+	public void setCallback(HttpSessionCallback callback);
+
+}
Index: src/main/java/com/atlassian/theplugin/commons/fisheye/FishEyeServerFacadeImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/fisheye/FishEyeServerFacadeImpl.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/fisheye/FishEyeServerFacadeImpl.java	(working copy)
@@ -1,54 +1,91 @@
-package com.atlassian.theplugin.commons.fisheye;
-
-import com.atlassian.theplugin.commons.ServerType;
-import com.atlassian.theplugin.commons.cfg.FishEyeServer;
-import com.atlassian.theplugin.commons.fisheye.api.FishEyeSession;
-import com.atlassian.theplugin.commons.fisheye.api.rest.FishEyeRestSession;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-
-import java.util.Collection;
-
-/**
- * User: pmaruszak
- */
-public class FishEyeServerFacadeImpl implements FishEyeServerFacade {
-	private static FishEyeServerFacadeImpl instance;
-
-	protected FishEyeServerFacadeImpl() {
-	}
-	
-	public void testServerConnection(final String url, final String userName, final String password) throws RemoteApiException {
-		FishEyeSession fishEyeSession = getSession(url);
-		fishEyeSession.login(userName, password.toCharArray());
-		fishEyeSession.logout();		
-	}
-
-	public ServerType getServerType() {
-		return ServerType.FISHEYE_SERVER;
-	}
-
-	public static synchronized FishEyeServerFacadeImpl getInstance() {
-		if (instance == null) {
-			instance = new FishEyeServerFacadeImpl();
-		}
-
-		return instance;
-	}
-
-
-	public FishEyeSession getSession(final String url) throws RemoteApiMalformedUrlException {
-		return new FishEyeRestSession(url);
-
-	}
-	
-	public Collection<String> getRepositories(final FishEyeServer server) throws RemoteApiException {
-		FishEyeSession fishEyeSession = getSession(server.getUrl());
-		Collection<String> repositories;
-		
-		fishEyeSession.login(server.getUsername(), server.getPassword().toCharArray());
-		repositories = fishEyeSession.getRepositories();
-		fishEyeSession.logout();
-		return repositories;
-	}
-}
+package com.atlassian.theplugin.commons.fisheye;
+
+import java.util.Collection;
+
+import com.atlassian.theplugin.commons.ServerType;
+import com.atlassian.theplugin.commons.cfg.FishEyeServer;
+import com.atlassian.theplugin.commons.cfg.FishEyeServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerCfg;
+import com.atlassian.theplugin.commons.cfg.ServerId;
+import com.atlassian.theplugin.commons.fisheye.api.FishEyeSession;
+import com.atlassian.theplugin.commons.fisheye.api.rest.FishEyeRestSession;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallback;
+import com.atlassian.theplugin.commons.remoteapi.rest.HttpSessionCallbackImpl;
+
+/**
+ * User: pmaruszak
+ */
+public class FishEyeServerFacadeImpl implements FishEyeServerFacade {
+	private static FishEyeServerFacadeImpl instance;
+	private HttpSessionCallback callback;
+	
+	protected FishEyeServerFacadeImpl() {
+		this.callback = new HttpSessionCallbackImpl();
+	}
+		
+	/**
+     * For testing Only
+     * @see com.atlassian.theplugin.commons.remoteapi.ProductServerFacade#testServerConnection(java.lang.String, java.lang.String, java.lang.String)
+     */
+    public void testServerConnection(String url, String userName, String password) throws RemoteApiException {
+    	FishEyeServerCfg serverCfg = new FishEyeServerCfg(url, new ServerId());
+    	serverCfg.setUrl(url);
+    	serverCfg.setUsername(userName);
+    	serverCfg.setPassword(password);
+    	testServerConnection(serverCfg);
+    }
+	
+	public void testServerConnection(ServerCfg serverCfg) throws RemoteApiException {
+		assert(serverCfg instanceof FishEyeServerCfg);
+		FishEyeSession fishEyeSession = getSession((FishEyeServerCfg)serverCfg);
+		fishEyeSession.login(serverCfg.getUsername(), serverCfg.getPassword().toCharArray());
+		fishEyeSession.logout();		
+	}
+
+	public ServerType getServerType() {
+		return ServerType.FISHEYE_SERVER;
+	}
+
+	public static synchronized FishEyeServerFacadeImpl getInstance() {
+		if (instance == null) {
+			instance = new FishEyeServerFacadeImpl();
+		}
+
+		return instance;
+	}
+
+	/**
+	 * For testing Only
+	 * 
+	 * @param server
+	 * @return
+	 * @throws RemoteApiMalformedUrlException
+	 */
+	public FishEyeSession getSession(String url) throws RemoteApiMalformedUrlException {
+		FishEyeServerCfg serverCfg = new FishEyeServerCfg(url, new ServerId());
+		serverCfg.setUrl(url);
+		return new FishEyeRestSession(serverCfg, callback);
+
+	}
+	
+	public FishEyeSession getSession(FishEyeServer server) throws RemoteApiMalformedUrlException {
+		return new FishEyeRestSession(server, callback);
+
+	}
+
+	public Collection<String> getRepositories(final FishEyeServer server) throws RemoteApiException {
+		FishEyeSession fishEyeSession = getSession(server);
+		Collection<String> repositories;
+		
+		fishEyeSession.login(server.getUsername(), server.getPassword().toCharArray());
+		repositories = fishEyeSession.getRepositories();
+		fishEyeSession.logout();
+		return repositories;
+	}
+	
+	public void setCallback(HttpSessionCallback callback) {
+		this.callback = callback;
+	}
+}
Index: src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/AbstractHttpSession.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/AbstractHttpSession.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/AbstractHttpSession.java	(working copy)
@@ -16,11 +16,14 @@
 
 package com.atlassian.theplugin.commons.remoteapi.rest;
 
-import com.atlassian.theplugin.commons.exception.HttpProxySettingsException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
-import com.atlassian.theplugin.commons.util.HttpClientFactory;
-import com.atlassian.theplugin.commons.util.UrlUtil;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpMethod;
 import org.apache.commons.httpclient.HttpStatus;
@@ -37,13 +40,11 @@
 import org.jdom.output.XMLOutputter;
 import org.jdom.xpath.XPath;
 
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import com.atlassian.theplugin.commons.cfg.Server;
+import com.atlassian.theplugin.commons.exception.HttpProxySettingsException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
+import com.atlassian.theplugin.commons.util.UrlUtil;
 
 /**
  * Communication stub for lightweight XML based APIs.
@@ -53,7 +54,9 @@
     protected String userName;
     protected String password;
     protected HttpClient client = null;
-
+	private HttpSessionCallback callback;
+	private Server server;
+	
     private final Object clientLock = new Object();
 
     private static ThreadLocal<URL> url = new ThreadLocal<URL>();
@@ -61,7 +64,7 @@
     // TODO: replace this with a proper cache to ensure automatic purging. Responses can get quite large.
     private final Map<String, CacheRecord> cache =
         new HashMap<String, CacheRecord>();
-
+        
     /**
      * This class holds an HTTP response body, together with its last
      * modification time and Etag.
@@ -113,8 +116,11 @@
      * @throws com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException
      *          for malformed url
      */
-    public AbstractHttpSession(String baseUrl) throws RemoteApiMalformedUrlException {
-
+    public AbstractHttpSession(Server server, HttpSessionCallback callback) throws RemoteApiMalformedUrlException {
+    	this.server = server;
+    	this.callback = callback;
+    	String baseUrl = server.getUrl();
+    	
         this.baseUrl = UrlUtil.removeUrlTrailingSlashes(baseUrl);
 
         try {
@@ -147,7 +153,7 @@
 		synchronized (clientLock) {
             if (client == null) {
                 try {
-                    client = HttpClientFactory.getClient();
+                    client = callback.getHttpClient(server);
                 } catch (HttpProxySettingsException e) {
                     throw (IOException) new IOException("Connection error. Please set up HTTP Proxy settings").initCause(e);
                 }
@@ -165,7 +171,7 @@
             try {
                 method.getParams().setCookiePolicy(CookiePolicy.RFC_2109);
                 method.getParams().setSoTimeout(client.getParams().getSoTimeout());
-                adjustHttpHeader(method);
+                callback.configureHttpMethod(this, method);
 
                 client.executeMethod(method);
 
@@ -227,7 +233,7 @@
         synchronized (clientLock) {
             if (client == null) {
                 try {
-                    client = HttpClientFactory.getClient();
+                	client = callback.getHttpClient(server);
                 } catch (HttpProxySettingsException e) {
                     throw (IOException) new IOException("Connection error. Please set up HTTP Proxy settings").initCause(e);
                 }
@@ -238,7 +244,7 @@
             try {
                 method.getParams().setCookiePolicy(CookiePolicy.RFC_2109);
                 method.getParams().setSoTimeout(client.getParams().getSoTimeout());
-                adjustHttpHeader(method);
+                callback.configureHttpMethod(this, method);
 
                 if (request != null && !"".equals(request)) {
                     method.setRequestEntity(
@@ -304,7 +310,7 @@
         synchronized (clientLock) {
             if (client == null) {
                 try {
-                    client = HttpClientFactory.getClient();
+                	client = callback.getHttpClient(server);
                 } catch (HttpProxySettingsException e) {
                     throw (IOException) new IOException("Connection error. Please set up HTTP Proxy settings").initCause(e);
                 }
@@ -315,7 +321,7 @@
             try {
                 method.getParams().setCookiePolicy(CookiePolicy.RFC_2109);
                 method.getParams().setSoTimeout(client.getParams().getSoTimeout());
-                adjustHttpHeader(method);
+                callback.configureHttpMethod(this, method);
 
                 client.executeMethod(method);
 
Index: src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallback.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallback.java	(revision 0)
+++ src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallback.java	(revision 0)
@@ -0,0 +1,21 @@
+package com.atlassian.theplugin.commons.remoteapi.rest;
+
+import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.HttpMethod;
+
+import com.atlassian.theplugin.commons.cfg.Server;
+import com.atlassian.theplugin.commons.exception.HttpProxySettingsException;
+
+/**
+ * Interface for the callback used by AbstractHttpSession for HttpClient setup
+ * 
+ * @author Shawn Minto
+ *
+ */
+public interface HttpSessionCallback {
+
+	HttpClient getHttpClient(Server server) throws HttpProxySettingsException;
+
+	void configureHttpMethod(AbstractHttpSession session, HttpMethod method);
+	
+}

Property changes on: src\main\java\com\atlassian\theplugin\commons\remoteapi\rest\HttpSessionCallback.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallbackImpl.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallbackImpl.java	(revision 0)
+++ src/main/java/com/atlassian/theplugin/commons/remoteapi/rest/HttpSessionCallbackImpl.java	(revision 0)
@@ -0,0 +1,25 @@
+package com.atlassian.theplugin.commons.remoteapi.rest;
+
+import org.apache.commons.httpclient.HttpClient;
+import org.apache.commons.httpclient.HttpMethod;
+
+import com.atlassian.theplugin.commons.cfg.Server;
+import com.atlassian.theplugin.commons.exception.HttpProxySettingsException;
+import com.atlassian.theplugin.commons.util.HttpClientFactory;
+
+/**
+ * Default implementation of the {@link HttpSessionCallback}
+ * 
+ * @author Shawn Minto
+ */
+public class HttpSessionCallbackImpl implements HttpSessionCallback {
+
+	public HttpClient getHttpClient(Server server) throws HttpProxySettingsException {
+		return HttpClientFactory.getClient();
+	}
+	
+	public void configureHttpMethod(AbstractHttpSession session, HttpMethod method) {
+		session.adjustHttpHeader(method);
+	}
+
+}

Property changes on: src\main\java\com\atlassian\theplugin\commons\remoteapi\rest\HttpSessionCallbackImpl.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/main/java/com/atlassian/theplugin/commons/remoteapi/ProductServerFacade.java
===================================================================
--- src/main/java/com/atlassian/theplugin/commons/remoteapi/ProductServerFacade.java	(revision 24083)
+++ src/main/java/com/atlassian/theplugin/commons/remoteapi/ProductServerFacade.java	(working copy)
@@ -1,25 +1,34 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.commons.remoteapi;
-
-import com.atlassian.theplugin.commons.ServerType;
-
-public interface ProductServerFacade {
-	void testServerConnection(String url, String userName, String password) throws RemoteApiException;
-
-	ServerType getServerType();
-}
+/**
+ * Copyright (C) 2008 Atlassian
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.atlassian.theplugin.commons.remoteapi;
+
+import com.atlassian.theplugin.commons.ServerType;
+import com.atlassian.theplugin.commons.cfg.ServerCfg;
+
+public interface ProductServerFacade {
+
+	void testServerConnection(ServerCfg serverCfg) throws RemoteApiException;
+
+	@Deprecated
+	/**
+	 * For testing only
+	 */
+	void testServerConnection(String url, String userName, String password) throws RemoteApiException;
+
+	
+	ServerType getServerType();
+}
Index: src/test/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSessionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSessionTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/bamboo/api/AutoRenewBambooSessionTest.java	(revision 0)
@@ -0,0 +1,432 @@
+/**
+ * Copyright (C) 2008 Atlassian
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.atlassian.theplugin.commons.bamboo.api;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+
+import junit.framework.TestCase;
+
+import org.easymock.EasyMock;
+
+import com.atlassian.theplugin.commons.bamboo.BambooBuild;
+import com.atlassian.theplugin.commons.bamboo.BambooChangeSet;
+import com.atlassian.theplugin.commons.bamboo.BambooPlan;
+import com.atlassian.theplugin.commons.bamboo.BambooProject;
+import com.atlassian.theplugin.commons.bamboo.BuildDetails;
+import com.atlassian.theplugin.commons.bamboo.BuildStatus;
+import com.atlassian.theplugin.commons.bamboo.TestDetails;
+import com.atlassian.theplugin.commons.cfg.BambooServerCfg;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
+import com.atlassian.theplugin.commons.remoteapi.RemoteApiSessionExpiredException;
+
+public class AutoRenewBambooSessionTest extends TestCase {
+	private BambooSession testedSession;
+	private BambooSession mockDelegate;
+	private static final String LOGIN = "login";
+	private static final char[] A_PASSWORD = "password".toCharArray();
+
+	public void setUp() throws Exception {
+        super.setUp();
+
+		mockDelegate = EasyMock.createStrictMock(BambooSession.class);
+		testedSession = new AutoRenewBambooSession("http://dupa");
+
+		Field field = AutoRenewBambooSession.class.getDeclaredField("delegate");
+		field.setAccessible(true);
+		field.set(testedSession, mockDelegate);
+
+	}
+
+    public void tearDown() throws Exception {
+        super.tearDown();
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testLogin() throws Exception {
+		mockDelegate.login(LOGIN, A_PASSWORD);
+		EasyMock.expectLastCall().andThrow(new RemoteApiLoginException(""));
+		EasyMock.replay(mockDelegate);
+
+		try {
+			testedSession.login(LOGIN, A_PASSWORD);
+			fail();
+		} catch (RemoteApiLoginException e) {
+			//expected
+		}
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testLogout() throws Exception {
+		mockDelegate.login(LOGIN, A_PASSWORD);
+		EasyMock.expectLastCall();
+		mockDelegate.logout();
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.logout();
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testListProjectNames() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listProjectNames();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listProjectNames();
+		EasyMock.expectLastCall().andReturn(Arrays.asList(new BambooProject[]{new BambooProject() {
+			public String getProjectName() {
+				return "project1";
+			}
+
+			public String getProjectKey() {
+				return "key1";
+			}
+		}, new BambooProject() {
+			public String getProjectName() {
+				return "project1";
+			}
+
+			public String getProjectKey() {
+				return "key1";
+			}
+		}, new BambooProject() {
+			public String getProjectName() {
+				return "project1";
+			}
+
+			public String getProjectKey() {
+				return "key1";
+			}
+		}}));
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		List<BambooProject> projects = testedSession.listProjectNames();
+
+		assertNotNull(projects);
+		assertEquals(3, projects.size());
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testListPlanNames() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listPlanNames();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.listPlanNames();
+		EasyMock.expectLastCall().andReturn(Arrays.asList(new BambooPlan[]{new BambooPlan() {
+			public String getPlanName() {
+				return "planName1";
+			}
+			public String getPlanKey() {
+				return "planKey1";
+			}
+			public boolean isFavourite() {
+				return false;
+			}
+			public boolean isEnabled() {
+				return false;
+			}
+		}, new BambooPlan() {
+			public String getPlanName() {
+				return "planName2";
+			}
+			public String getPlanKey() {
+				return "planKey2";
+			}
+			public boolean isFavourite() {
+				return false;
+			}
+			public boolean isEnabled() {
+				return false;
+			}
+		}} ));
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		List<BambooPlan> plans = testedSession.listPlanNames();
+		assertNotNull(plans);
+		assertEquals(2, plans.size());
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testGetLatestBuildForPlan() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getLatestBuildForPlan("planKey");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getLatestBuildForPlan("planKey");
+		EasyMock.expectLastCall().andReturn(new BambooBuild() {
+			public BambooServerCfg getServer() {
+				return null;  
+			}
+
+			public String getServerUrl() {
+				return null;
+			}
+
+			public String getProjectName() {
+				return null;
+			}
+
+			public String getProjectKey() {
+				return null;
+			}
+
+			public String getProjectUrl() {
+				return null;
+			}
+
+			public String getBuildUrl() {
+				return null;
+			}
+
+			public String getBuildName() {
+				return null;
+			}
+
+			public String getBuildKey() {
+				return null;
+			}
+
+			public boolean getEnabled() {
+				return false;
+			}
+
+			public String getBuildNumber() {
+				return null;
+			}
+
+			public String getBuildResultUrl() {
+				return null;
+			}
+
+			public BuildStatus getStatus() {
+				return null;
+			}
+
+			public String getMessage() {
+				return null;
+			}
+
+			public int getTestsPassed() {
+				return 0;
+			}
+
+			public int getTestsFailed() {
+				return 0;
+			}
+
+			public Date getBuildTime() {
+				return null;
+			}
+
+			public String getBuildReason() {
+				return null;
+			}
+
+			public String getBuildRelativeBuildDate() {
+				return null;
+			}
+
+			public void setPollingTime(Date date) {
+			}
+			
+			public Date getPollingTime() {
+				return null;
+			}
+
+			public boolean isMyBuild() {
+				return false;
+			}
+		});
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		BambooBuild build = testedSession.getLatestBuildForPlan("planKey");
+		assertNotNull(build);
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testGetFavouriteUserPlans() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getFavouriteUserPlans();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getFavouriteUserPlans();
+		EasyMock.expectLastCall().andReturn(Arrays.asList(new String[] {"plan1", "plan2", "plan3"}));
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		List<String> plans = testedSession.getFavouriteUserPlans();
+		assertNotNull(plans);
+		assertEquals(3, plans.size());
+
+		EasyMock.verify(mockDelegate);
+
+	}
+
+	public void testGetBuildResultDetails() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBuildResultDetails("buildKey", "buildNumber");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBuildResultDetails("buildKey", "buildNumber");
+		EasyMock.expectLastCall().andReturn(new BuildDetails() {
+
+			public String getVcsRevisionKey() {
+				return null;
+			}
+
+			public List<TestDetails> getSuccessfulTestDetails() {
+				return null;
+			}
+
+			public List<TestDetails> getFailedTestDetails() {
+				return null;  
+			}
+
+			public List<BambooChangeSet> getCommitInfo() {
+				return null;
+			}
+		});
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		BuildDetails build = testedSession.getBuildResultDetails("buildKey", "buildNumber");
+		assertNotNull(build);
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testAddLabelToBuild() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addLabelToBuild("buildKey", "buildNumber", "label");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addLabelToBuild("buildKey", "buildNumber", "label");
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.addLabelToBuild("buildKey", "buildNumber", "label");
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testAddCommentToBuild() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addCommentToBuild("buildKey", "buildNumber", "comment");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.addCommentToBuild("buildKey", "buildNumber", "comment");
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.addCommentToBuild("buildKey", "buildNumber", "comment");
+
+		EasyMock.verify(mockDelegate);
+	}
+
+	public void testExecuteBuild() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.executeBuild("buildKey");
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.executeBuild("buildKey");
+		EasyMock.expectLastCall();
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.executeBuild("buildKey");
+
+		EasyMock.verify(mockDelegate);
+	}	
+
+	public void testGetBambooBuildNumber() throws Exception {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBamboBuildNumber();
+		EasyMock.expectLastCall().andThrow(new RemoteApiSessionExpiredException(""));
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.getBamboBuildNumber();
+		EasyMock.expectLastCall().andReturn(770);
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		testedSession.getBamboBuildNumber();
+
+		EasyMock.verify(mockDelegate);
+	}
+
+
+	public void testIsLoggedIn() throws RemoteApiLoginException {
+		mockDelegate.login(EasyMock.eq("login"), EasyMock.isA(char[].class));
+		EasyMock.expectLastCall();
+		mockDelegate.isLoggedIn();
+		EasyMock.expectLastCall().andReturn(true);
+		mockDelegate.logout();
+		mockDelegate.isLoggedIn();
+		EasyMock.expectLastCall().andReturn(false);
+
+		EasyMock.replay(mockDelegate);
+
+		testedSession.login(LOGIN, A_PASSWORD);
+		assertTrue(testedSession.isLoggedIn());
+		testedSession.logout();
+		assertFalse(testedSession.isLoggedIn());
+
+		EasyMock.verify(mockDelegate);
+	}
+
+}

Property changes on: src\test\java\com\atlassian\theplugin\commons\bamboo\api\AutoRenewBambooSessionTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/test/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionSslTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionSslTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionSslTest.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.commons.bamboo;
+package com.atlassian.theplugin.commons.bamboo.api;
 
 import com.atlassian.theplugin.bamboo.api.bamboomock.LoginCallback;
 import com.atlassian.theplugin.bamboo.api.bamboomock.LogoutCallback;

Property changes on: src\test\java\com\atlassian\theplugin\commons\bamboo\api\BambooSessionSslTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/bamboo/api/BambooSessionTest.java	(working copy)
@@ -14,23 +14,37 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.commons.bamboo;
+package com.atlassian.theplugin.commons.bamboo.api;
 
+import java.io.IOException;
+import java.util.List;
+
+import org.ddsteps.mock.httpserver.JettyMockServer;
+
 import com.atlassian.theplugin.api.AbstractSessionTest;
-import com.atlassian.theplugin.bamboo.api.bamboomock.*;
-import com.atlassian.theplugin.commons.bamboo.api.AutoRenewBambooSession;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSession;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSessionImpl;
+import com.atlassian.theplugin.bamboo.api.bamboomock.AddCommentToBuildCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.AddLabelToBuildCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.BuildDetailsResultCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.ErrorMessageCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.ExecuteBuildCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.FavouritePlanListCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.LatestBuildResultCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.LoginCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.LogoutCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.PlanListCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.ProjectListCallback;
+import com.atlassian.theplugin.bamboo.api.bamboomock.Util;
+import com.atlassian.theplugin.commons.bamboo.BambooBuild;
+import com.atlassian.theplugin.commons.bamboo.BambooPlan;
+import com.atlassian.theplugin.commons.bamboo.BambooProject;
+import com.atlassian.theplugin.commons.bamboo.BuildDetails;
+import com.atlassian.theplugin.commons.bamboo.TestResult;
 import com.atlassian.theplugin.commons.remoteapi.ProductSession;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-import org.ddsteps.mock.httpserver.JettyMockServer;
 
-import java.io.IOException;
-import java.util.List;
 
-
 /**
  * Test case for {#link BambooSessionImpl}
  */

Property changes on: src\test\java\com\atlassian\theplugin\commons\bamboo\api\BambooSessionTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/bamboo/BambooSessionSslTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/bamboo/BambooSessionSslTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/bamboo/BambooSessionSslTest.java	(working copy)
@@ -1,92 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.commons.bamboo;
-
-import com.atlassian.theplugin.bamboo.api.bamboomock.LoginCallback;
-import com.atlassian.theplugin.bamboo.api.bamboomock.LogoutCallback;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSession;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSessionImpl;
-import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
-import com.atlassian.theplugin.commons.configuration.PluginConfiguration;
-import com.atlassian.theplugin.commons.configuration.PluginConfigurationBean;
-import com.atlassian.theplugin.commons.thirdparty.apache.EasyX509TrustManager;
-import com.atlassian.theplugin.commons.thirdparty.apache.EasySSLProtocolSocketFactory;
-import com.atlassian.theplugin.commons.util.HttpClientFactory;
-import junit.framework.TestCase;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.mortbay.jetty.Server;
-import org.mortbay.jetty.security.SslSocketConnector;
-import org.apache.commons.httpclient.protocol.Protocol;
-import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;
-
-public class BambooSessionSslTest extends TestCase {
-	private static final String USER_NAME = "someSslUser";
-	private static final String PASSWORD = "SomeSslPass";
-
-
-	private Server server;
-	private JettyMockServer mockServer;
-	private String mockBaseUrl;
-
-	@Override
-	protected void setUp() throws Exception {
-		Protocol.registerProtocol("https", new Protocol(
-				"https", (ProtocolSocketFactory) new EasySSLProtocolSocketFactory(),
-				EasySSLProtocolSocketFactory.SSL_PORT));
-		PluginConfiguration configuration = new PluginConfigurationBean();
-		ConfigurationFactory.setConfiguration(configuration);
-
-
-		String keystoreLocation = getClass().getResource("/mock/selfSigned.keystore").toExternalForm();
-        SslSocketConnector sslConnector = new SslSocketConnector();
-
-		sslConnector.setPort(0);
-		sslConnector.setKeystore(keystoreLocation);
-		sslConnector.setPassword("password");
-		sslConnector.setKeyPassword("password");
-
-		server = new Server();
-
-		server.addConnector(sslConnector);
-		server.start();
-
-		mockBaseUrl = "https://localhost:" + sslConnector.getLocalPort();
-
-		mockServer = new JettyMockServer(server);
-	}
-
-	@Override
-	protected void tearDown() throws Exception {
-		mockServer = null;
-		mockBaseUrl = null;
-		//server.stop();
-	}
-
-	public void testSuccessBambooLoginOnSSL() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback(LoginCallback.AUTH_TOKEN));
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		assertTrue(apiHandler.isLoggedIn());
-		apiHandler.logout();
-		assertFalse(apiHandler.isLoggedIn());
-
-		mockServer.verify();
-	}
-
-}
Index: src/test/java/com/atlassian/theplugin/commons/bamboo/BambooSessionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/bamboo/BambooSessionTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/bamboo/BambooSessionTest.java	(working copy)
@@ -1,682 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.commons.bamboo;
-
-import com.atlassian.theplugin.api.AbstractSessionTest;
-import com.atlassian.theplugin.bamboo.api.bamboomock.*;
-import com.atlassian.theplugin.commons.bamboo.api.AutoRenewBambooSession;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSession;
-import com.atlassian.theplugin.commons.bamboo.api.BambooSessionImpl;
-import com.atlassian.theplugin.commons.remoteapi.ProductSession;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-
-import java.io.IOException;
-import java.util.List;
-
-
-/**
- * Test case for {#link BambooSessionImpl}
- */
-public class BambooSessionTest extends AbstractSessionTest {
-	public void testSuccessBambooLogin() throws Exception {
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-
-		String[] usernames = { "user", "+-=&;<>", "", "a;&username=other", "!@#$%^&*()_-+=T " };
-		String[] passwords = { "password", "+-=&;<>", "", "&password=other", ",./';[]\t\\ |}{\":><?" };
-
-		for (int i = 0; i < usernames.length; ++i) {
-			mockServer.expect("/api/rest/login.action", new LoginCallback(usernames[i], passwords[i]));
-			mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-            apiHandler.login(usernames[i], passwords[i].toCharArray());
-			assertTrue(apiHandler.isLoggedIn());
-			apiHandler.logout();
-			assertFalse(apiHandler.isLoggedIn());
-		}
-
-		mockServer.verify();
-	}
-
-	public void testSuccessBambooLoginURLWithSlash() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback(LoginCallback.AUTH_TOKEN));
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl + "/");
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		assertTrue(apiHandler.isLoggedIn());
-		apiHandler.logout();
-		assertFalse(apiHandler.isLoggedIn());
-
-		mockServer.verify();
-	}
-
-	public void testNullParamsLogin() throws Exception {
-		try {
-			BambooSession apiHandler = new BambooSessionImpl(null);
-			apiHandler.login(null, null);
-			fail();
-		} catch (RemoteApiException ex) {
-			System.out.println("Exception: " + ex.getMessage());
-		}
-	}
-
-	protected ProductSession getProductSession(final String url) throws RemoteApiMalformedUrlException {
-		return new BambooSessionImpl(url);
-	}
-
-
-
-	protected JettyMockServer.Callback getLoginCallback(final boolean isFail) {
-		return new LoginCallback(USER_NAME, PASSWORD, LoginCallback.ALWAYS_FAIL);
-	}
-
-		protected String getLoginUrl() {
-		return "/api/rest/login.action";
-	}
-
-	public void testWrongParamsBambooLogin() throws Exception {
-		try {
-			BambooSession apiHandler = new BambooSessionImpl("");
-			apiHandler.login("", "".toCharArray());
-			fail();
-		} catch (RemoteApiException ex) {
-			System.out.println("Exception: " + ex.getMessage());
-		}
-	}
-
-
-	public void testProjectList() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/listProjectNames.action", new ProjectListCallback());
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		List<BambooProject> projects = apiHandler.listProjectNames();
-		apiHandler.logout();
-
-		Util.verifyProjectListResult(projects);
-
-		mockServer.verify();
-	}
-
-	public void testPlanList() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/listBuildNames.action", new PlanListCallback());
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		List<BambooPlan> plans = apiHandler.listPlanNames();
-		apiHandler.logout();
-
-		Util.verifyPlanListResult(plans);
-		mockServer.verify();
-	}
-
-	public void testFavouritePlanList() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getLatestUserBuilds.action", new FavouritePlanListCallback());
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		List<String> plans = apiHandler.getFavouriteUserPlans();
-		apiHandler.logout();
-
-		Util.verifyFavouriteListResult(plans);
-		mockServer.verify();
-	}
-
-	public void testBuildForPlanSuccess() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getLatestBuildResults.action", new LatestBuildResultCallback());
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BambooBuild build = apiHandler.getLatestBuildForPlan("TP-DEF");
-		apiHandler.logout();
-
-		Util.verifySuccessfulBuildResult(build, mockBaseUrl);
-
-		mockServer.verify();
-	}
-
-
-	public void testBuildForPlanFailure() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getLatestBuildResults.action", new LatestBuildResultCallback("FAILED"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BambooBuild build = apiHandler.getLatestBuildForPlan("TP-DEF");
-		apiHandler.logout();
-
-		Util.verifyFailedBuildResult(build, mockBaseUrl);
-
-		mockServer.verify();
-	}
-
-	public void testBuildForNonExistingPlan() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getLatestBuildResults.action", new LatestBuildResultCallback("WRONG"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BambooBuild build = apiHandler.getLatestBuildForPlan("TP-DEF");
-		apiHandler.logout();
-
-		Util.verifyErrorBuildResult(build);
-
-		mockServer.verify();
-	}
-
-	public void testBuildDetailsFor1CommitFailedSuccessTests() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("buildResult-1Commit-FailedTests-SuccessfulTests.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BuildDetails build = apiHandler.getBuildResultDetails("TP-DEF", "100");
-		apiHandler.logout();
-
-		mockServer.verify();
-
-		assertNotNull(build);
-		assertEquals("13928", build.getVcsRevisionKey());
-		// commit
-		assertEquals(1, build.getCommitInfo().size());
-		assertEquals("author", build.getCommitInfo().iterator().next().getAuthor());
-		assertNotNull(build.getCommitInfo().iterator().next().getCommitDate());
-		assertEquals("commit comment", build.getCommitInfo().iterator().next().getComment());
-		assertEquals(3, build.getCommitInfo().iterator().next().getFiles().size());
-		assertEquals("13928", build.getCommitInfo().iterator().next().getFiles().iterator().next().getFileDescriptor().getRevision());
-		assertEquals(
-				"/PL/trunk/ThePlugin/src/main/java/com/atlassian/theplugin/bamboo/HtmlBambooStatusListener.java",
-				build.getCommitInfo().iterator().next().getFiles().iterator().next().getFileDescriptor().getUrl());
-
-		// failed tests
-		assertEquals(2, build.getFailedTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.HtmlBambooStatusListenerTest",
-				build.getFailedTestDetails().iterator().next().getTestClassName());
-		assertEquals("testSingleSuccessResultForDisabledBuild",
-				build.getFailedTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.012,
-				build.getFailedTestDetails().iterator().next().getTestDuration());
-		assertNotNull(build.getFailedTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_FAILED,
-				build.getFailedTestDetails().iterator().next().getTestResult());
-
-		// successful tests
-		assertEquals(117, build.getSuccessfulTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.BambooServerFacadeTest",
-				build.getSuccessfulTestDetails().iterator().next().getTestClassName());
-		assertEquals("testProjectList",
-				build.getSuccessfulTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.046,
-				build.getSuccessfulTestDetails().iterator().next().getTestDuration());
-		assertNull(build.getSuccessfulTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_SUCCEED,
-				build.getSuccessfulTestDetails().iterator().next().getTestResult());
-	}
-
-	public void testBuildDetailsFor1CommitFailedTests() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("buildResult-1Commit-FailedTests.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BuildDetails build = apiHandler.getBuildResultDetails("TP-DEF", "100");
-		apiHandler.logout();
-		
-		mockServer.verify();
-
-		assertNotNull(build);
-		assertEquals("13928", build.getVcsRevisionKey());
-		// commit
-		assertEquals(1, build.getCommitInfo().size());
-		assertEquals("author", build.getCommitInfo().iterator().next().getAuthor());
-		assertNotNull(build.getCommitInfo().iterator().next().getCommitDate());
-		assertEquals("commit comment", build.getCommitInfo().iterator().next().getComment());
-		assertEquals(3, build.getCommitInfo().iterator().next().getFiles().size());
-		assertEquals("13928", build.getCommitInfo().iterator().next().getFiles().iterator().next().getFileDescriptor().getRevision());
-		assertEquals(
-				"/PL/trunk/ThePlugin/src/main/java/com/atlassian/theplugin/bamboo/HtmlBambooStatusListener.java",
-				build.getCommitInfo().iterator().next().getFiles().iterator().next().getFileDescriptor().getUrl());
-
-		// failed tests
-		assertEquals(2, build.getFailedTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.HtmlBambooStatusListenerTest",
-				build.getFailedTestDetails().iterator().next().getTestClassName());
-		assertEquals("testSingleSuccessResultForDisabledBuild",
-				build.getFailedTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.012,
-				build.getFailedTestDetails().iterator().next().getTestDuration());
-		assertNotNull(build.getFailedTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_FAILED,
-				build.getFailedTestDetails().iterator().next().getTestResult());
-
-		// successful tests
-		assertEquals(0, build.getSuccessfulTestDetails().size());
-	}
-
-	public void testBuildDetailsFor1CommitSuccessTests() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("buildResult-1Commit-SuccessfulTests.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BuildDetails build = apiHandler.getBuildResultDetails("TP-DEF", "100");
-		apiHandler.logout();
-
-		mockServer.verify();
-
-		assertNotNull(build);
-		assertEquals("13928", build.getVcsRevisionKey());
-		// commit
-		assertEquals(1, build.getCommitInfo().size());
-		assertEquals("author", build.getCommitInfo().iterator().next().getAuthor());
-		assertNotNull(build.getCommitInfo().iterator().next().getCommitDate());
-		assertEquals("commit comment", build.getCommitInfo().iterator().next().getComment());
-		assertEquals(3, build.getCommitInfo().iterator().next().getFiles().size());
-		assertEquals("13928", build.getCommitInfo().iterator().next().getFiles().iterator().next().getFileDescriptor().getRevision());
-		assertEquals(
-				"/PL/trunk/ThePlugin/src/main/java/com/atlassian/theplugin/bamboo/HtmlBambooStatusListener.java",
-				build.getCommitInfo().iterator().next().getFiles().iterator().next().getFileDescriptor().getUrl());
-
-		// failed tests
-		assertEquals(0, build.getFailedTestDetails().size());
-
-		// successful tests
-		assertEquals(117, build.getSuccessfulTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.BambooServerFacadeTest",
-				build.getSuccessfulTestDetails().iterator().next().getTestClassName());
-		assertEquals("testProjectList",
-				build.getSuccessfulTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.046,
-				build.getSuccessfulTestDetails().iterator().next().getTestDuration());
-		assertNull(build.getSuccessfulTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_SUCCEED,
-				build.getSuccessfulTestDetails().iterator().next().getTestResult());
-	}
-
-	public void testBuildDetailsFor3CommitFailedSuccessTests() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("buildResult-3Commit-FailedTests-SuccessfulTests.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BuildDetails build = apiHandler.getBuildResultDetails("TP-DEF", "100");
-		apiHandler.logout();
-
-		mockServer.verify();
-
-		assertNotNull(build);
-		assertEquals("13928", build.getVcsRevisionKey());
-		// commit
-		assertEquals(3, build.getCommitInfo().size());
-		assertEquals("author", build.getCommitInfo().get(0).getAuthor());
-		assertNotNull(build.getCommitInfo().get(0).getCommitDate());
-		assertEquals("commit comment", build.getCommitInfo().get(0).getComment());
-		assertEquals(3, build.getCommitInfo().get(0).getFiles().size());
-		assertEquals("13928", build.getCommitInfo().get(0).getFiles().iterator().next().getFileDescriptor().getRevision());
-		assertEquals(
-				"/PL/trunk/ThePlugin/src/main/java/com/atlassian/theplugin/bamboo/HtmlBambooStatusListener.java",
-				build.getCommitInfo().get(0).getFiles().iterator().next().getFileDescriptor().getUrl());
-		assertEquals(2, build.getCommitInfo().get(1).getFiles().size());
-		assertEquals(1, build.getCommitInfo().get(2).getFiles().size());		
-
-		// failed tests
-		assertEquals(2, build.getFailedTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.HtmlBambooStatusListenerTest",
-				build.getFailedTestDetails().iterator().next().getTestClassName());
-		assertEquals("testSingleSuccessResultForDisabledBuild",
-				build.getFailedTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.012,
-				build.getFailedTestDetails().iterator().next().getTestDuration());
-		assertNotNull(build.getFailedTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_FAILED,
-				build.getFailedTestDetails().iterator().next().getTestResult());
-
-		assertEquals("error 1\n", build.getFailedTestDetails().get(0).getErrors());
-		assertEquals("error 2\n", build.getFailedTestDetails().get(1).getErrors());		
-
-		// successful tests
-		assertEquals(117, build.getSuccessfulTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.BambooServerFacadeTest",
-				build.getSuccessfulTestDetails().iterator().next().getTestClassName());
-		assertEquals("testProjectList",
-				build.getSuccessfulTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.046,
-				build.getSuccessfulTestDetails().iterator().next().getTestDuration());
-		assertNull(build.getSuccessfulTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_SUCCEED,
-				build.getSuccessfulTestDetails().iterator().next().getTestResult());
-
-		assertEquals("com.atlassian.theplugin.crucible.CrucibleServerFacadeConnectionTest",
-				build.getSuccessfulTestDetails().get(116).getTestClassName());
-		assertEquals("testConnectionTestFailedNullPassword",
-				build.getSuccessfulTestDetails().get(116).getTestMethodName());
-		assertEquals(0.001,
-				build.getSuccessfulTestDetails().get(116).getTestDuration());
-		assertNull(build.getSuccessfulTestDetails().get(116).getErrors());
-		assertEquals(TestResult.TEST_SUCCEED,
-				build.getSuccessfulTestDetails().get(116).getTestResult());
-	}
-
-	public void testBuildDetailsForNoCommitFailedSuccessTests() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("buildResult-NoCommit-FailedTests-SuccessfulTests.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BuildDetails build = apiHandler.getBuildResultDetails("TP-DEF", "100");
-		apiHandler.logout();
-
-		mockServer.verify();
-
-		assertNotNull(build);
-		assertEquals("13928", build.getVcsRevisionKey());
-		// commit
-		assertEquals(0, build.getCommitInfo().size());
-
-		// failed tests
-		assertEquals(2, build.getFailedTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.HtmlBambooStatusListenerTest",
-				build.getFailedTestDetails().iterator().next().getTestClassName());
-		assertEquals("testSingleSuccessResultForDisabledBuild",
-				build.getFailedTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.012,
-				build.getFailedTestDetails().iterator().next().getTestDuration());
-		assertNotNull(build.getFailedTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_FAILED,
-				build.getFailedTestDetails().iterator().next().getTestResult());
-
-		// successful tests
-		assertEquals(117, build.getSuccessfulTestDetails().size());
-		assertEquals("com.atlassian.theplugin.commons.bamboo.BambooServerFacadeTest",
-				build.getSuccessfulTestDetails().iterator().next().getTestClassName());
-		assertEquals("testProjectList",
-				build.getSuccessfulTestDetails().iterator().next().getTestMethodName());
-		assertEquals(0.046,
-				build.getSuccessfulTestDetails().iterator().next().getTestDuration());
-		assertNull(build.getSuccessfulTestDetails().iterator().next().getErrors());
-		assertEquals(TestResult.TEST_SUCCEED,
-				build.getSuccessfulTestDetails().iterator().next().getTestResult());
-	}
-
-	public void testBuildDetailsForNonExistingBuild() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("buildNotExistsResponse.xml", "200"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		try {
-			apiHandler.getBuildResultDetails("TP-DEF", "200");
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testBuildDetailsMalformedResponse() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("malformedBuildResult.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		try {
-			apiHandler.getBuildResultDetails("TP-DEF", "100");
-			fail();
-		} catch (RemoteApiException e) {
-			assertEquals("org.jdom.input.JDOMParseException", e.getCause().getClass().getName());
-		}
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testBuildDetailsEmptyResponse() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/getBuildResultsDetails.action", new BuildDetailsResultCallback("emptyResponse.xml", "100"));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		BuildDetails build = apiHandler.getBuildResultDetails("TP-DEF", "100");
-		apiHandler.logout();
-
-		assertEquals(0, build.getCommitInfo().size());
-		assertEquals(0, build.getSuccessfulTestDetails().size());
-		assertEquals(0, build.getFailedTestDetails().size());
-
-		mockServer.verify();
-	}
-
-	public void testAddSimpleLabel() throws Exception {
-		String label = "label siple text";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addLabelToBuildResults.action", new AddLabelToBuildCallback(label));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.addLabelToBuild("TP-DEF", "100", label);
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddEmptyLabel() throws Exception {
-		String label = "";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addLabelToBuildResults.action", new AddLabelToBuildCallback(label));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.addLabelToBuild("TP-DEF", "100", label);
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddMultiLineLabel() throws Exception {
-		String label = "Label first line\nLabel second line	\nLabel third line";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addLabelToBuildResults.action", new AddLabelToBuildCallback(label));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.addLabelToBuild("TP-DEF", "100", label);
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddLabelToNonExistingBuild() throws Exception {
-		String label = "Label";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addLabelToBuildResults.action", new AddLabelToBuildCallback(label, "200", AddLabelToBuildCallback.NON_EXIST_FAIL));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		try {
-			apiHandler.addLabelToBuild("TP-DEF", "200", label);
-			fail();
-		} catch (RemoteApiException e) {
-
-		}
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddComment() throws Exception {
-		String comment = "comment siple text";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addCommentToBuildResults.action", new AddCommentToBuildCallback(comment));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.addCommentToBuild("TP-DEF", "100", comment);
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddEmptyComment() throws Exception {
-		String comment = "";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addCommentToBuildResults.action", new AddCommentToBuildCallback(comment));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.addCommentToBuild("TP-DEF", "100", comment);
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddMultiLineComment() throws Exception {
-		String comment = "Comment first line\nComment ; second line	\nComment third line";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addCommentToBuildResults.action", new AddCommentToBuildCallback(comment));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.addCommentToBuild("TP-DEF", "100", comment);
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testAddCommentToNonExistingBuild() throws Exception {
-		String comment = "Comment";
-
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/addCommentToBuildResults.action", new AddCommentToBuildCallback(comment, "200", AddCommentToBuildCallback.NON_EXIST_FAIL));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		try {
-			apiHandler.addCommentToBuild("TP-DEF", "200", comment);
-			fail();
-		} catch (RemoteApiException e) {
-
-		}
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testExecuteBuild() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/executeBuild.action", new ExecuteBuildCallback());
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.executeBuild("TP-DEF");
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testExecuteBuildFailed() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/executeBuild.action", new ExecuteBuildCallback(ExecuteBuildCallback.NON_EXIST_FAIL));
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new BambooSessionImpl(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		try {
-			apiHandler.executeBuild("TP-DEF");
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-		apiHandler.logout();
-
-		mockServer.verify();
-	}
-
-	public void testRenewSession() throws Exception {
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/listProjectNames.action", new ProjectListCallback());
-		mockServer.expect("/api/rest/listProjectNames.action", new ErrorMessageCallback("authExpiredResponse.xml"));
-		mockServer.expect("/api/rest/login.action", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/api/rest/listProjectNames.action", new ProjectListCallback());
-		mockServer.expect("/api/rest/logout.action", new LogoutCallback());
-
-		BambooSession apiHandler = new AutoRenewBambooSession(mockBaseUrl);
-		apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		apiHandler.listProjectNames();
-		List<BambooProject> projects = apiHandler.listProjectNames();		
-		apiHandler.logout();
-
-		Util.verifyProjectListResult(projects);
-
-		mockServer.verify();
-	}
-
-	public void testOutOfRangePort() {
-		String url = "http://localhost:80808";
-		RemoteApiLoginException exception = null;
-		try {
-			BambooSession apiHandler = new BambooSessionImpl(url);
-			apiHandler.login(USER_NAME, PASSWORD.toCharArray());
-		} catch (RemoteApiException e) {
-			exception = new RemoteApiLoginException(e.getMessage(), e);
-		}
-
-		assertNotNull("Exception expected", exception);
-		assertNotNull("Exception should have a cause", exception.getCause());
-		assertTrue("MalformedURLException expected", exception.getCause().getCause() instanceof IOException);
-	}
-
-}

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\api\rest\cruciblemock
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/CreateReviewCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/CreateReviewCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/CreateReviewCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import com.atlassian.theplugin.commons.crucible.api.model.PermIdBean;
 import com.atlassian.theplugin.commons.crucible.api.model.Review;
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetProjectsCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetProjectsCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetProjectsCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import static junit.framework.Assert.assertTrue;
 import org.ddsteps.mock.httpserver.JettyMockServer;
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetRepositoriesCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetRepositoriesCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetRepositoriesCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import static com.atlassian.theplugin.commons.crucible.api.JDomHelper.getContent;
 import static junit.framework.Assert.assertTrue;
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetReviewersCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetReviewersCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetReviewersCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import static com.atlassian.theplugin.commons.crucible.api.JDomHelper.getContent;
 import com.atlassian.theplugin.commons.crucible.api.model.User;
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetReviewsCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetReviewsCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/GetReviewsCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import static com.atlassian.theplugin.commons.crucible.api.JDomHelper.getContent;
 import com.atlassian.theplugin.commons.crucible.api.model.State;
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/LoginCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/LoginCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/LoginCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import static junit.framework.Assert.*;
 import org.ddsteps.mock.httpserver.JettyMockServer;
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/MalformedResponseCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/MalformedResponseCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/MalformedResponseCallback.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import org.ddsteps.mock.httpserver.JettyMockServer;
 
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/Util.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/Util.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/Util.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import static junit.framework.Assert.fail;
 
@@ -30,7 +30,7 @@
 	}
 
 	static void copyResource(OutputStream outputStream, String resource) {
-		BufferedInputStream is = new BufferedInputStream(com.atlassian.theplugin.crucible.api.rest.cruciblemock.Util.class.getResourceAsStream(RESOURCE_BASE + resource));
+		BufferedInputStream is = new BufferedInputStream(com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock.Util.class.getResourceAsStream(RESOURCE_BASE + resource));
 		int c;
 		try {
 			while ((c = is.read()) != -1) {
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/VersionInfoCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/VersionInfoCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/cruciblemock/VersionInfoCallback.java	(working copy)
@@ -1,4 +1,4 @@
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
+package com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock;
 
 import org.ddsteps.mock.httpserver.JettyMockServer;
 
Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/CharArrayEquals.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/CharArrayEquals.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/CharArrayEquals.java	(working copy)
@@ -1,4 +1,4 @@
-package com.atlassian.theplugin.crucible.api.rest;
+package com.atlassian.theplugin.commons.crucible.api.rest;
 
 import org.easymock.IArgumentMatcher;
 

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\api\rest\CharArrayEquals.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/CrucibleSessionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/CrucibleSessionTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/rest/CrucibleSessionTest.java	(working copy)
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api.rest;
+package com.atlassian.theplugin.commons.crucible.api.rest;
 
 import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
 import com.atlassian.theplugin.commons.configuration.PluginConfigurationBean;
 import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
 import com.atlassian.theplugin.commons.crucible.api.model.*;
 import com.atlassian.theplugin.commons.crucible.api.rest.CrucibleSessionImpl;
+import com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock.*;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.*;
 import com.atlassian.theplugin.remoteapi.ErrorResponse;
 import junit.framework.TestCase;
 import org.ddsteps.mock.httpserver.JettyMockServer;

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\api\rest\CrucibleSessionTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/crucible/api/HtmlCrucibleStatusListenerTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/api/HtmlCrucibleStatusListenerTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/api/HtmlCrucibleStatusListenerTest.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible.api;
+package com.atlassian.theplugin.commons.crucible.api;
 
 import com.atlassian.theplugin.commons.crucible.CrucibleStatusDisplay;
 import com.gargoylesoftware.htmlunit.StringWebResponse;

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\api\HtmlCrucibleStatusListenerTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeConnectionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeConnectionTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeConnectionTest.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible;
+package com.atlassian.theplugin.commons.crucible;
 
 import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
 import com.atlassian.theplugin.commons.cfg.ServerId;
@@ -23,11 +23,11 @@
 import com.atlassian.theplugin.commons.crucible.CrucibleServerFacade;
 import com.atlassian.theplugin.commons.crucible.CrucibleServerFacadeImpl;
 import com.atlassian.theplugin.commons.crucible.api.CrucibleLoginException;
+import com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock.LoginCallback;
+import com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock.VersionInfoCallback;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginFailedException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.LoginCallback;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.VersionInfoCallback;
 import junit.framework.TestCase;
 import org.ddsteps.mock.httpserver.JettyMockServer;
 

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\CrucibleServerFacadeConnectionTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/CrucibleServerFacadeTest.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible;
+package com.atlassian.theplugin.commons.crucible;
 
 import com.atlassian.theplugin.commons.VirtualFileSystem;
 import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
@@ -26,11 +26,11 @@
 import com.atlassian.theplugin.commons.crucible.ValueNotYetInitialized;
 import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
 import com.atlassian.theplugin.commons.crucible.api.model.*;
+import com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock.LoginCallback;
+import com.atlassian.theplugin.commons.crucible.api.rest.cruciblemock.VersionInfoCallback;
 import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.LoginCallback;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.VersionInfoCallback;
 import junit.framework.TestCase;
 import org.ddsteps.mock.httpserver.JettyMockServer;
 import org.easymock.EasyMock;

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\CrucibleServerFacadeTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/crucible/ReviewDataInfoImplTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/crucible/ReviewDataInfoImplTest.java	(revision 0)
+++ src/test/java/com/atlassian/theplugin/commons/crucible/ReviewDataInfoImplTest.java	(working copy)
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.atlassian.theplugin.crucible;
+package com.atlassian.theplugin.commons.crucible;
 
 import com.atlassian.theplugin.commons.crucible.api.model.PermId;
 import com.atlassian.theplugin.commons.crucible.api.model.ReviewBean;

Property changes on: src\test\java\com\atlassian\theplugin\commons\crucible\ReviewDataInfoImplTest.java
___________________________________________________________________
Added: svn:mergeinfo

Index: src/test/java/com/atlassian/theplugin/commons/fisheye/api/rest/FishEyeServerFacadeTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/commons/fisheye/api/rest/FishEyeServerFacadeTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/commons/fisheye/api/rest/FishEyeServerFacadeTest.java	(working copy)
@@ -5,12 +5,12 @@
 import com.atlassian.theplugin.commons.cfg.FishEyeServer;
 import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
 import com.atlassian.theplugin.commons.configuration.PluginConfigurationBean;
+import com.atlassian.theplugin.commons.crucible.api.rest.CharArrayEquals;
 import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
 import com.atlassian.theplugin.commons.fisheye.FishEyeServerFacadeImpl;
 import com.atlassian.theplugin.commons.fisheye.api.FishEyeSession;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
 import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-import com.atlassian.theplugin.crucible.api.rest.CharArrayEquals;
 import junit.framework.TestCase;
 import org.easymock.EasyMock;
 import static org.easymock.EasyMock.createMock;
@@ -44,6 +44,12 @@
 			public FishEyeSession getSession(final String url) throws RemoteApiMalformedUrlException {
 				return fishEyeSessionMock;
 			}
+			
+			@Override
+			public FishEyeSession getSession(FishEyeServer server)
+					throws RemoteApiMalformedUrlException {
+				return fishEyeSessionMock;
+			}
 		};
 	}
 
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/CreateReviewCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/CreateReviewCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/CreateReviewCallback.java	(working copy)
@@ -1,72 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import com.atlassian.theplugin.commons.crucible.api.model.PermIdBean;
-import com.atlassian.theplugin.commons.crucible.api.model.Review;
-import com.atlassian.theplugin.commons.crucible.api.model.ReviewBean;
-import com.atlassian.theplugin.commons.crucible.api.model.State;
-import com.atlassian.theplugin.commons.crucible.api.rest.CrucibleRestXmlHelper;
-import static junit.framework.Assert.assertTrue;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.input.SAXBuilder;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
-import org.jdom.xpath.XPath;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.util.List;
-
-public class CreateReviewCallback implements JettyMockServer.Callback {
-    public static final String REPO_NAME = "AtlassianSVN";
-    public static final String PERM_ID = "PR-1";
-
-    public void onExpectedRequest(String target,
-                                  HttpServletRequest request, HttpServletResponse response)
-            throws Exception {
-
-        assertTrue(request.getPathInfo().endsWith("/rest-service/reviews-v1"));
-        assertTrue("POST".equalsIgnoreCase(request.getMethod()));
-
-        SAXBuilder builder = new SAXBuilder();
-        Document req = builder.build(request.getInputStream());
-
-        XPath xpath = XPath.newInstance("/createReview/reviewData");
-        @SuppressWarnings("unchecked")
-        List<Element> elements = xpath.selectNodes(req);
-
-		Review reqReview = CrucibleRestXmlHelper.parseReviewNode(null, elements.get(0));
-
-        ReviewBean reviewData = null;
-        if (elements != null && !elements.isEmpty()) {
-			reviewData = CrucibleRestXmlHelper.parseReviewNode(null, elements.iterator().next());
-			reviewData.setState(State.DRAFT);
-			PermIdBean permId = new PermIdBean(PERM_ID);
-			reviewData.setPermId(permId);
-			reviewData.setAuthor(reqReview.getAuthor());
-			reviewData.setCreator(reqReview.getCreator());
-			reviewData.setModerator(reqReview.getModerator());
-		}
-
-        Document doc = CrucibleRestXmlHelper.prepareReviewNode(reviewData);
-        XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
-        outputter.output(doc, response.getOutputStream());
-    }
-}
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetProjectsCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetProjectsCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetProjectsCallback.java	(working copy)
@@ -1,76 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import static junit.framework.Assert.assertTrue;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-public class GetProjectsCallback implements JettyMockServer.Callback {
-	private int size;
-
-	public GetProjectsCallback(int size) {
-		this.size = size;
-	}
-
-	public void onExpectedRequest(String target,
-								  HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-
-		assertTrue(request.getPathInfo().endsWith("/rest-service/projects-v1"));
-
-		Document doc;
-		doc = getProjects();
-		XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
-		outputter.output(doc, response.getOutputStream());
-	}
-
-    @SuppressWarnings("unchecked")
-	private Document getProjects() {
-		Element root = new Element("projects");
-		Document doc = new Document(root);
-		for (int i = 0; i < size; i++) {
-			root.getContent().add(getProject(i));
-		}
-		return doc;
-	}
-
-	private Element getProject(int i) {
-		Element projectData = new Element("projectData");
-
-		addTag(projectData, "allowReviewersToJoin", "false");
-		addTag(projectData, "id", Integer.toString(i));
-		addTag(projectData, "key", "CR" + Integer.toString(i));
-		addTag(projectData, "name", "ProjectName" + Integer.toString(i));
-		addTag(projectData, "permissionSchemeId", "1");
-
-		return projectData;
-	}
-
-    @SuppressWarnings("unchecked")
-    void addTag(Element root, String tagName, String tagValue) {
-		Element newElement = new Element(tagName);
-		newElement.addContent(tagValue);
-        root.getContent().add(newElement);
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetRepositoriesCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetRepositoriesCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetRepositoriesCallback.java	(working copy)
@@ -1,69 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import static com.atlassian.theplugin.commons.crucible.api.JDomHelper.getContent;
-import static junit.framework.Assert.assertTrue;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-public class GetRepositoriesCallback implements JettyMockServer.Callback {
-	private int size;
-
-	public GetRepositoriesCallback(int size) {
-		this.size = size;
-	}
-
-	public void onExpectedRequest(String target,
-								  HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-
-		assertTrue(request.getPathInfo().endsWith("/rest-service/repositories-v1"));
-
-		Document doc;
-		doc = getRepositories();
-		XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
-		outputter.output(doc, response.getOutputStream());
-	}
-
-	private Document getRepositories() {
-		Element root = new Element("repositories");
-		Document doc = new Document(root);
-		for (int i = 0; i < size; i++) {
-            getContent(root).add(getRepositories(i));
-		}
-		return doc;
-	}
-
-	private Element getRepositories(int i) {
-		Element projectData = new Element("repoData");
-		addTag(projectData, "name", "RepoName" + Integer.toString(i));
-		return projectData;
-	}
-
-	void addTag(Element root, String tagName, String tagValue) {
-		Element newElement = new Element(tagName);
-		newElement.addContent(tagValue);
-		getContent(root).add(newElement);
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetReviewersCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetReviewersCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetReviewersCallback.java	(working copy)
@@ -1,70 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import static com.atlassian.theplugin.commons.crucible.api.JDomHelper.getContent;
-import com.atlassian.theplugin.commons.crucible.api.model.User;
-import static junit.framework.Assert.assertTrue;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-public class GetReviewersCallback implements JettyMockServer.Callback {
-	private User[] reviewers;
-
-	public GetReviewersCallback(User[] reviewers) {
-		this.reviewers = reviewers;
-	}
-
-	public void onExpectedRequest(String target,
-								  HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-
-		assertTrue(request.getPathInfo().endsWith("/rest-service/reviews-v1/PR-1/reviewers"));
-
-		Document doc = getReviewers(reviewers);
-		XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
-		outputter.output(doc, response.getOutputStream());
-	}
-
-	private Document getReviewers(User[] reviewers) {
-		Element root = new Element("reviewers");
-		Document doc = new Document(root);
-		for (int i = 0; i < reviewers.length; i++) {
-            getContent(root).add(getUsers(i));
-		}
-		return doc;
-	}
-
-	private Element getUsers(int i) {
-		Element userData = new Element("reviewer");
-		addTag(userData, "userName", reviewers[i].getUserName());
-        addTag(userData, "displayName", reviewers[i].getDisplayName());        
-        return userData;
-	}
-
-	private static void addTag(Element root, String tagName, String tagValue) {
-		Element newElement = new Element(tagName);
-		newElement.addContent(tagValue);
-		getContent(root).add(newElement);
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetReviewsCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetReviewsCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/GetReviewsCallback.java	(working copy)
@@ -1,101 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import static com.atlassian.theplugin.commons.crucible.api.JDomHelper.getContent;
-import com.atlassian.theplugin.commons.crucible.api.model.State;
-import static junit.framework.Assert.assertTrue;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.jdom.Document;
-import org.jdom.Element;
-import org.jdom.output.Format;
-import org.jdom.output.XMLOutputter;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.util.ArrayList;
-import java.util.List;
-
-public class GetReviewsCallback implements JettyMockServer.Callback {
-	List<State> states;
-
-	public GetReviewsCallback(List<State> states) {
-		this.states = states;
-	}
-
-	public void onExpectedRequest(String target,
-								  HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-
-		assertTrue(request.getPathInfo().endsWith("/rest-service/reviews-v1"));
-
-		Document doc;
-		final String[] statesParam = request.getParameterValues("state");
-		if (statesParam != null) {
-			assertTrue(1 == statesParam.length);
-			String[] stateStrings = statesParam[0].split(",");
-			List<State> returnStates = new ArrayList<State>();
-			for (String stateString : stateStrings) {
-				State s = State.fromValue(stateString);
-				if (states.contains(s)) {
-					returnStates.add(s);
-				}
-			}
-			doc = getReviews(returnStates);
-		} else {
-			doc = getReviews(states);
-		}
-		XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
-		outputter.output(doc, response.getOutputStream());
-	}
-
-	private Document getReviews(List<State> states) {
-		Element root = new Element("reviews");
-		Document doc = new Document(root);
-		for (State state : states) {
-			getContent(root).add(getReviewInState(state));
-		}
-		return doc;
-	}
-
-	private Element getReviewInState(State state) {
-		Element reviewData = new Element("reviewData");
-
-		addTag(reviewData, "author", "author");
-		addTag(reviewData, "creator", "creator");
-		addTag(reviewData, "description", "description");
-		addTag(reviewData, "moderator", "moderator");
-		addTag(reviewData, "name", "name");
-		addTag(reviewData, "projectKey", "PR");
-		addTag(reviewData, "repoName", "RepoName");
-		addTag(reviewData, "state", state.value());
-
-		Element newPermaId = new Element("permaId");
-		Element newId = new Element("id");
-		newId.addContent("PR-1");
-		getContent(newPermaId).add(newId);
-		getContent(reviewData).add(newPermaId);
-
-		return reviewData;
-	}
-
-	void addTag(Element root, String tagName, String tagValue) {
-		Element newElement = new Element(tagName);
-		newElement.addContent(tagValue);
-        getContent(root).add(newElement);
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/LoginCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/LoginCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/LoginCallback.java	(working copy)
@@ -1,76 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import static junit.framework.Assert.*;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import com.atlassian.theplugin.commons.crucible.api.model.User;
-import com.atlassian.theplugin.commons.crucible.api.model.UserBean;
-
-public class LoginCallback implements JettyMockServer.Callback {
-
-	private final User expectedUser;
-	private final String expectedPassword;
-	private final boolean fail;
-
-	public static final boolean ALWAYS_FAIL = true;
-	public static final String AUTH_TOKEN = "authtokenstring";
-
-	public LoginCallback(String expectedUserName, String expectedPassword) {
-		this(expectedUserName, expectedPassword, false);
-	}
-
-	public LoginCallback(String expectedUserName, String expectedPassword, boolean alwaysFail) {
-		this.expectedUser = new UserBean(expectedUserName);
-		this.expectedPassword = expectedPassword;
-
-		fail = alwaysFail;
-	}
-
-	public void onExpectedRequest(String target,
-								  HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-
-
-		assertTrue(request.getPathInfo().endsWith("/rest-service/auth-v1/login"));
-
-		final String[] usernames = request.getParameterValues("userName");
-		final String[] passwords = request.getParameterValues("password");
-
-		assertEquals(1, usernames.length);
-		assertEquals(1, passwords.length);
-
-		final String username = usernames[0];
-		final String password = passwords[0];
-
-		assertNotNull(username);
-		assertNotNull(password);
-
-		assertEquals(expectedUser.getUserName(), username);
-		assertEquals(expectedPassword, password);
-
-		Util.copyResource(response.getOutputStream(), fail ? "loginFailedResponse.xml" : "loginSuccessResponse.xml");
-		response.getOutputStream().flush();
-
-	}
-
-
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/MalformedResponseCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/MalformedResponseCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/MalformedResponseCallback.java	(working copy)
@@ -1,31 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import org.ddsteps.mock.httpserver.JettyMockServer;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-public class MalformedResponseCallback implements JettyMockServer.Callback {
-	public void onExpectedRequest(String target,
-								  HttpServletRequest request, HttpServletResponse response)
-			throws Exception {
-		response.getOutputStream().write("<tag></badtag>".getBytes());
-		response.getOutputStream().flush();
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/Util.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/Util.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/Util.java	(working copy)
@@ -1,43 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import static junit.framework.Assert.fail;
-
-import java.io.BufferedInputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-
-public abstract class Util {
-
-	private static final String RESOURCE_BASE = "/mock/crucible/api/rest/";
-
-	private Util() {
-	}
-
-	static void copyResource(OutputStream outputStream, String resource) {
-		BufferedInputStream is = new BufferedInputStream(com.atlassian.theplugin.crucible.api.rest.cruciblemock.Util.class.getResourceAsStream(RESOURCE_BASE + resource));
-		int c;
-		try {
-			while ((c = is.read()) != -1) {
-				outputStream.write(c);
-			}
-		} catch (IOException e) {
-			fail(e.getMessage());
-		}
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/VersionInfoCallback.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/VersionInfoCallback.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/cruciblemock/VersionInfoCallback.java	(working copy)
@@ -1,29 +0,0 @@
-package com.atlassian.theplugin.crucible.api.rest.cruciblemock;
-
-import org.ddsteps.mock.httpserver.JettyMockServer;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import static junit.framework.Assert.assertTrue;
-
-public class VersionInfoCallback implements JettyMockServer.Callback {
-	private boolean cru16;
-
-	public VersionInfoCallback(boolean cru16) {
-		this.cru16 = cru16;
-	}
-
-	public void onExpectedRequest(String target, HttpServletRequest request, HttpServletResponse response) throws Exception {
-		assertTrue(request.getPathInfo().endsWith("/rest-service/reviews-v1/versionInfo"));
-
-		if (cru16) {
-			Util.copyResource(response.getOutputStream(), "versionInfoSuccessResponse.xml");
-		} else {
-			Util.copyResource(response.getOutputStream(), "versionInfoFailureResponse.xml");
-			response.setStatus(500);
-		}
-		response.getOutputStream().flush();
-
-	}
-}
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/CharArrayEquals.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/CharArrayEquals.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/CharArrayEquals.java	(working copy)
@@ -1,33 +0,0 @@
-package com.atlassian.theplugin.crucible.api.rest;
-
-import org.easymock.IArgumentMatcher;
-
-/**
- * User: pmaruszak
- */
-public class CharArrayEquals implements IArgumentMatcher {
-	char[] expected;
-
-	public CharArrayEquals(final char[] expected) {
-		this.expected = expected;
-	}
-
-	public boolean matches(final Object argument) {
-		if (!(argument instanceof char[])) {
-			return false;
-		}
-		char[] givenValue = (char[]) argument;
-		return expected.length == givenValue.length;
-	}
-
-	public void appendTo(final StringBuffer buffer) {
-		buffer.append("eqException(");
-		buffer.append(expected.getClass().getName());
-		buffer.append(" with value \"");
-		buffer.append(String.valueOf(expected));
-		buffer.append("\")");
-
-	}
-
-
-}
Index: src/test/java/com/atlassian/theplugin/crucible/api/rest/CrucibleSessionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/rest/CrucibleSessionTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/rest/CrucibleSessionTest.java	(working copy)
@@ -1,765 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api.rest;
-
-import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
-import com.atlassian.theplugin.commons.configuration.PluginConfigurationBean;
-import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
-import com.atlassian.theplugin.commons.crucible.api.model.*;
-import com.atlassian.theplugin.commons.crucible.api.rest.CrucibleSessionImpl;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.*;
-import com.atlassian.theplugin.remoteapi.ErrorResponse;
-import junit.framework.TestCase;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.mortbay.jetty.Server;
-
-import java.io.IOException;
-import java.net.MalformedURLException;
-import java.net.UnknownHostException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-
-/**
- * Test case for {#link BambooSessionImpl}
- */
-public class CrucibleSessionTest extends TestCase {
-	private static final String USER_NAME = "someUser";
-	private static final String PASSWORD = "somePassword";
-
-	private Server server;
-	private JettyMockServer mockServer;
-	private String mockBaseUrl;
-
-	@Override
-	protected void setUp() throws Exception {
-        ConfigurationFactory.setConfiguration(new PluginConfigurationBean());
-
-        server = new Server(0);
-		server.start();
-
-		mockBaseUrl = "http://localhost:" + server.getConnectors()[0].getLocalPort();
-
-		mockServer = new JettyMockServer(server);
-	}
-
-	@Override
-	protected void tearDown() throws Exception {
-		mockServer.verify();
-		mockServer = null;
-		mockBaseUrl = null;
-		server.stop();
-	}
-
-	public void testSuccessCrucibleLogin() throws Exception {
-
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		String[] usernames = { "user", "+-=&;<>", "", "a;&username=other", "!@#$%^&*()_-+=T " };
-		String[] passwords = { "password", "+-=&;<>", "", "&password=other", ",./';[]\t\\ |}{\":><?" };
-
-		for (int i = 0; i < usernames.length; ++i) {
-			mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(usernames[i], passwords[i]));
-
-			apiHandler.login(usernames[i], passwords[i]);
-			assertTrue(apiHandler.isLoggedIn());
-			apiHandler.logout();
-			assertFalse(apiHandler.isLoggedIn());
-		}
-
-		mockServer.verify();
-	}
-
-	public void testLoginMalformedResponse() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new MalformedResponseCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		try {
-			apiHandler.login(USER_NAME, PASSWORD);
-			fail();
-		} catch (RemoteApiException e) {
-
-		}
-	}
-
-	public void testLoginInternalErrorResponse() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new ErrorResponse(500, ""));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		try {
-			apiHandler.login(USER_NAME, PASSWORD);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-	}
-
-	public void testSuccessBambooLoginURLWithSlash() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl + "/");
-		apiHandler.login(USER_NAME, PASSWORD);
-		assertTrue(apiHandler.isLoggedIn());
-		apiHandler.logout();
-		assertFalse(apiHandler.isLoggedIn());
-
-		mockServer.verify();
-	}
-
-	public void testNullParamsLogin() throws Exception {
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl(null);
-			apiHandler.login(null, null);
-			fail();
-		} catch (RemoteApiException ex) {
-			System.out.println("Exception: " + ex.getMessage());
-		}
-	}
-
-	public void testNullLoginLogin() throws Exception {
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-			apiHandler.login(null, null);
-			fail();
-		} catch (RemoteApiLoginException ex) {
-			System.out.println("Exception: " + ex.getMessage());
-		}
-	}
-
-	public void testWrongUrlBambooLogin() throws Exception {
-		ErrorResponse error = new ErrorResponse(400, "Bad Request");
-		mockServer.expect("/wrongurl/rest-service/auth-v1/login", error);
-		RemoteApiLoginException exception = null;
-
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl + "/wrongurl");
-			apiHandler.login(USER_NAME, PASSWORD);
-		} catch (RemoteApiLoginException ex) {
-			exception = ex;
-		}
-		mockServer.verify();
-
-		assertNotNull("Exception expected", exception);
-		assertNotNull("Exception should have a cause", exception.getCause());
-		assertSame(IOException.class, exception.getCause().getClass());
-		assertTrue(exception.getMessage().contains(error.getErrorMessage()));
-	}
-
-	public void testNonExistingServerBambooLogin() throws Exception {
-		RemoteApiLoginException exception = null;
-
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl("http://non.existing.server.utest");
-			apiHandler.login(USER_NAME, PASSWORD);
-		} catch (RemoteApiLoginException ex) {
-			exception = ex;
-		}
-
-		assertNotNull("Exception expected", exception);
-		assertNotNull("Exception should have a cause", exception.getCause());
-		assertSame("UnknownHostException expected", UnknownHostException.class, exception.getCause().getClass());
-		assertEquals("Checking exception message", "Unknown host: non.existing.server.utest", exception.getMessage());
-	}
-
-	public void testMalformedUrlCrucibleLogin() {
-		tryMalformedUrl("noprotocol.url/path");
-		tryMalformedUrl("http:localhost/path");
-		tryMalformedUrl("http:/localhost/path");
-		tryMalformedUrl("http:///localhost/path");
-		tryMalformedUrl("http:localhost");
-		tryMalformedUrl("http:/localhost");
-		tryMalformedUrl("http:///localhost");
-		tryMalformedUrl("http://");
-		tryMalformedUrl("ncxvx:/localhost/path");
-		tryMalformedUrl("ncxvx:///localhost/path");
-		tryMalformedUrl("ncxvx://localhost/path");
-		tryMalformedUrl("ncxvx:///localhost/path");
-		tryMalformedUrl("https:localhost/path");
-		tryMalformedUrl("https:/localhost/path");
-		tryMalformedUrl("https:///localhost/path");
-		tryMalformedUrl("https:localhost");
-		tryMalformedUrl("https:/localhost");
-		tryMalformedUrl("https:///localhost");
-		tryMalformedUrl("https://");
-		tryMalformedUrl("http::localhost/path");
-		tryMalformedUrl("http://loca:lhost/path");
-	}
-
-	private void tryMalformedUrl(final String url) {
-		RemoteApiException exception = null;
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl(url);
-			apiHandler.login(USER_NAME, PASSWORD);
-		} catch (RemoteApiLoginException e) {
-			exception = e;
-		} catch (RemoteApiException e) {
-			exception = e;
-		}
-
-		assertNotNull("Exception expected", exception);
-		assertNotNull("Exception should have a cause", exception.getCause());
-		assertTrue("MalformedURLException expected", exception.getCause() instanceof MalformedURLException);
-		assertEquals("Malformed server URL: " + url, exception.getMessage());
-	}
-
-	public void testOutOfRangePort() {
-		String url = "http://localhost:80808";
-		RemoteApiException exception = null;
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl(url);
-			apiHandler.login(USER_NAME, PASSWORD);
-		} catch (RemoteApiException e) {
-			exception = e;
-		}
-
-		assertNotNull("Exception expected", exception);
-		assertNotNull("Exception should have a cause", exception.getCause());
-		assertTrue("MalformedURLException expected", exception.getCause() instanceof IOException);
-	}
-
-
-	public void testWrongUserCrucibleLogin() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD, LoginCallback.ALWAYS_FAIL));
-
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-			apiHandler.login(USER_NAME, PASSWORD); // mock will fail this
-			fail();
-		} catch (RemoteApiLoginException ex) {
-			System.out.println("Exception: " + ex.getMessage());
-		}
-
-		mockServer.verify();
-	}
-
-
-	public void testWrongParamsCrucibleLogin() throws Exception {
-		try {
-			CrucibleSession apiHandler = new CrucibleSessionImpl("");
-			apiHandler.login("", "");
-			fail();
-		} catch (RemoteApiException ex) {
-			System.out.println("Exception: " + ex.getMessage());
-		}
-	}
-
-	public void testSuccessCrucibleLogout() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		assertTrue(apiHandler.isLoggedIn());
-
-		apiHandler.logout();
-		apiHandler.logout();
-
-		CrucibleSession apiHandler2 = new CrucibleSessionImpl(mockBaseUrl);
-		apiHandler2.logout();
-
-		mockServer.verify();
-	}
-
-	public void testFailedCrucibleLogin() {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD, LoginCallback.ALWAYS_FAIL));
-		CrucibleSession apiHandler = null;
-		try {
-			apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-		} catch (RemoteApiException e) {
-			fail();
-		}
-
-		try {
-
-			apiHandler.login(USER_NAME, PASSWORD);
-			fail("Login succeeded while expected failure.");
-		} catch (RemoteApiLoginException e) {
-			// expected
-		}
-
-		try {
-			apiHandler.login(null, PASSWORD);
-			fail("Login succeeded while expected failure.");
-		} catch (RemoteApiLoginException e) {
-			// expected
-		}
-
-		try {
-			apiHandler.login(USER_NAME, null);
-			fail("Login succeeded while expected failure.");
-		} catch (RemoteApiLoginException e) {
-			// expected
-		}
-
-		mockServer.verify();
-	}
-
-	public void testSuccessCrucibleDoubleLogin() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		apiHandler.login(USER_NAME, PASSWORD);
-
-		mockServer.verify();
-	}
-
-	public void testMethodCallWithoutLogin() throws Exception {
-		CrucibleSession crucibleSession = new CrucibleSessionImpl(mockBaseUrl);
-		List<State> states = new ArrayList<State>();
-		try {
-			crucibleSession.getReviewsInStates(states, false);
-			fail();
-		} catch (IllegalStateException e) {
-			//expected
-		}
-		try {
-			crucibleSession.getAllReviews(false);
-			fail();
-		} catch (IllegalStateException e) {
-			//expected
-		}
-		try {
-			crucibleSession.getReviewers(null);
-			fail();
-		} catch (IllegalStateException e) {
-			//expected
-		}
-
-		try {
-			crucibleSession.createReview(null);
-			fail();
-		} catch (IllegalStateException e) {
-			//expected
-		}
-
-		try {
-			crucibleSession.createReviewFromPatch(null, "patch");
-			fail();
-		} catch (IllegalStateException e) {
-			//expected
-		}
-	}
-
-	public void testGetAllTypeReviews() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.values());
-		mockServer.expect("/rest-service/reviews-v1", new GetReviewsCallback(states));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Review> reviews = apiHandler.getAllReviews(false);
-		assertEquals(states.size(), reviews.size());
-		int i = 0;
-		for (Review review : reviews) {
-			assertEquals(review.getState(), states.get(i++));
-		}
-		mockServer.verify();
-	}
-
-	public void testGetEmptyReviews() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = new ArrayList<State>();
-		mockServer.expect("/rest-service/reviews-v1", new GetReviewsCallback(states));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Review> reviews = apiHandler.getAllReviews(false);
-		assertEquals(states.size(), reviews.size());
-		assertTrue(reviews.isEmpty());
-		mockServer.verify();
-	}
-
-	public void testGetEmptyReviewsForType() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = new ArrayList<State>();
-		mockServer.expect("/rest-service/reviews-v1", new GetReviewsCallback(states));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Review> reviews = apiHandler.getAllReviews(false);
-		assertEquals(states.size(), reviews.size());
-		assertTrue(reviews.isEmpty());
-		mockServer.verify();
-	}
-
-	public void testGetReviewsInStates() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/reviews-v1", new GetReviewsCallback(states));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Review> reviews = apiHandler.getReviewsInStates(states, false);
-		assertEquals(states.size(), reviews.size());
-		assertTrue(!reviews.isEmpty());
-		mockServer.verify();
-	}
-
-	public void testGetMissingReviewsInStates() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/reviews-v1", new GetReviewsCallback(states));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<State> req = Arrays.asList(State.CLOSED);
-		List<Review> reviews = apiHandler.getReviewsInStates(req, false);
-		assertTrue(reviews.isEmpty());
-		mockServer.verify();
-	}
-
-	public void testGetEmptyRequestReviewsInStates() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/reviews-v1", new GetReviewsCallback(states));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<State> req = new ArrayList<State>();
-		List<Review> reviews = apiHandler.getReviewsInStates(req, false);
-		assertEquals(states.size(), reviews.size());
-		assertTrue(!reviews.isEmpty());
-		mockServer.verify();
-	}
-
-	public void testGetAllReviewsMalformedResponse() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new MalformedResponseCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		PermIdBean permId = new PermIdBean("PR-1");
-		try {
-			apiHandler.getAllReviews(false);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-		mockServer.verify();
-	}
-
-	public void testGetReviewsInStatesMalformedResponse() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new MalformedResponseCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		PermIdBean permId = new PermIdBean("PR-1");
-		try {
-			List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-			apiHandler.getReviewsInStates(states, false);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-		mockServer.verify();
-	}
-
-	public void testGetEmptyReviewers() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1/PR-1/reviewers", new GetReviewersCallback(new User[]{}));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		PermIdBean permId = new PermIdBean("PR-1");
-		List<Reviewer> reviewers = apiHandler.getReviewers(permId);
-		assertEquals(0, reviewers.size());
-		mockServer.verify();
-	}
-
-	public void testGetReviewers() throws Exception {
-		UserBean[] reviewers = new UserBean[3];
-		reviewers[0] = new UserBean();
-		reviewers[0].setUserName("bob");
-		reviewers[1] = new UserBean();
-		reviewers[1].setUserName("alice");
-		reviewers[2] = new UserBean();
-		reviewers[2].setUserName("steve");
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1/PR-1/reviewers", new GetReviewersCallback(reviewers));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		PermIdBean permId = new PermIdBean("PR-1");
-		List<Reviewer> result = apiHandler.getReviewers(permId);
-		assertEquals(3, result.size());
-		assertEquals(result.get(0).getUserName(), "bob");
-		assertEquals(result.get(1).getUserName(), "alice");
-		assertEquals(result.get(2).getUserName(), "steve");
-		mockServer.verify();
-	}
-
-	public void testGetReviewersInvalidId() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1/PR-2/reviewers", new ErrorResponse(500, ""));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		PermIdBean permId = new PermIdBean("PR-2");
-		try {
-			apiHandler.getReviewers(permId);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-
-		mockServer.verify();
-	}
-
-	public void testGetReviewersMalformedResponse() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1/PR-1/reviewers", new MalformedResponseCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		PermIdBean permId = new PermIdBean("PR-1");
-		try {
-			apiHandler.getReviewers(permId);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-
-		mockServer.verify();
-	}
-
-	public void testCreateReview() throws Exception {
-		ReviewBean review = createReviewRequest();
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new CreateReviewCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		Review response = apiHandler.createReview(review);
-		assertEquals(review.getAuthor(), response.getAuthor());
-		assertEquals(review.getCreator(), response.getCreator());
-		assertEquals(review.getDescription(), response.getDescription());
-		assertEquals(review.getModerator(), response.getModerator());
-		assertEquals(review.getName(), response.getName());
-		assertEquals(review.getProjectKey(), response.getProjectKey());
-		assertEquals(State.DRAFT, response.getState());
-		assertEquals(CreateReviewCallback.PERM_ID, response.getPermId().getId());
-
-		mockServer.verify();
-	}
-
-	public void testCreateReviewMalformedResponse() throws Exception {
-		ReviewBean review = createReviewRequest();
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new MalformedResponseCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		try {
-			apiHandler.createReview(review);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-		mockServer.verify();
-	}
-
-	public void testCreateReviewErrorResponse() throws Exception {
-		ReviewBean review = createReviewRequest();
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new ErrorResponse(500, ""));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		try {
-			apiHandler.createReview(review);
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-
-		mockServer.verify();
-	}
-
-
-	public void testCreateReviewFromPatch() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new CreateReviewCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		ReviewBean review = createReviewRequest();
-		Review response = apiHandler.createReviewFromPatch(review, "patch text");
-		assertEquals(review.getAuthor(), response.getAuthor());
-		assertEquals(review.getCreator(), response.getCreator());
-		assertEquals(review.getDescription(), response.getDescription());
-		assertEquals(review.getModerator(), response.getModerator());
-		assertEquals(review.getName(), response.getName());
-		assertEquals(review.getProjectKey(), response.getProjectKey());
-		assertEquals(State.DRAFT, response.getState());
-		assertEquals(CreateReviewCallback.PERM_ID, response.getPermId().getId());
-
-		mockServer.verify();
-	}
-
-	public void testCreateReviewFromNullPatch() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new CreateReviewCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		ReviewBean review = createReviewRequest();
-		Review response = apiHandler.createReviewFromPatch(review, null);
-		assertEquals(review.getAuthor(), response.getAuthor());
-		assertEquals(review.getCreator(), response.getCreator());
-		assertEquals(review.getDescription(), response.getDescription());
-		assertEquals(review.getModerator(), response.getModerator());
-		assertEquals(review.getName(), response.getName());
-		assertEquals(review.getProjectKey(), response.getProjectKey());
-		assertEquals(State.DRAFT, response.getState());
-		assertEquals(CreateReviewCallback.PERM_ID, response.getPermId().getId());
-
-		mockServer.verify();
-	}
-
-	public void testCreateReviewFromEmptyPatch() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new CreateReviewCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		ReviewBean review = createReviewRequest();
-		Review response = apiHandler.createReviewFromPatch(review, "");
-		assertEquals(review.getAuthor(), response.getAuthor());
-		assertEquals(review.getCreator(), response.getCreator());
-		assertEquals(review.getDescription(), response.getDescription());
-		assertEquals(review.getModerator(), response.getModerator());
-		assertEquals(review.getName(), response.getName());
-		assertEquals(review.getProjectKey(), response.getProjectKey());
-		assertEquals(State.DRAFT, response.getState());
-		assertEquals(CreateReviewCallback.PERM_ID, response.getPermId().getId());
-
-		mockServer.verify();
-	}
-
-	public void testCreateReviewFromPatchMalformedResponse() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1", new MalformedResponseCallback());
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		try {
-			ReviewBean review = createReviewRequest();
-			apiHandler.createReviewFromPatch(review, "patch text");
-			fail();
-		} catch (RemoteApiException e) {
-			// expected
-		}
-
-		mockServer.verify();
-	}
-
-	public void testGetProjects() throws Exception {
-		int size = 4;
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/projects-v1", new GetProjectsCallback(size));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Project> project = apiHandler.getProjects();
-		assertEquals(size, project.size());
-		for (int i = 0; i < size; i++) {
-			String id = Integer.toString(i);
-			assertEquals(id, project.get(i).getId());
-			assertEquals("ProjectName" + id, project.get(i).getName());
-			assertEquals("CR" + id, project.get(i).getKey());
-		}
-		mockServer.verify();
-	}
-
-	public void testGetProjectsEmpty() throws Exception {
-		int size = 0;
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/projects-v1", new GetProjectsCallback(size));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Project> project = apiHandler.getProjects();
-		assertEquals(size, project.size());
-		for (int i = 0; i < size; i++) {
-			String id = Integer.toString(i);
-			assertEquals(id, project.get(i).getId());
-			assertEquals("ProjectName" + id, project.get(i).getName());
-			assertEquals("CR" + id, project.get(i).getKey());
-		}
-		mockServer.verify();
-	}
-
-	public void testGetRepositories() throws Exception {
-		int size = 4;
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/repositories-v1", new GetRepositoriesCallback(size));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Repository> repositories = apiHandler.getRepositories();
-		assertEquals(size, repositories.size());
-		for (int i = 0; i < size; i++) {
-			String id = Integer.toString(i);
-			assertEquals("RepoName" + id, repositories.get(i).getName());
-		}
-		mockServer.verify();
-	}
-
-	public void testGetRepositoriesEmpty() throws Exception {
-		int size = 0;
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		List<State> states = Arrays.asList(State.REVIEW, State.DRAFT);
-		mockServer.expect("/rest-service/repositories-v1", new GetRepositoriesCallback(size));
-		CrucibleSession apiHandler = new CrucibleSessionImpl(mockBaseUrl);
-
-		apiHandler.login(USER_NAME, PASSWORD);
-		List<Repository> repositories = apiHandler.getRepositories();
-		assertEquals(size, repositories.size());
-		for (int i = 0; i < size; i++) {
-			String id = Integer.toString(i);
-			assertEquals("RepoName" + id, repositories.get(i).getName());
-		}
-		mockServer.verify();
-	}
-
-	private ReviewBean createReviewRequest() {
-		ReviewBean review = new ReviewBean(mockBaseUrl);
-		review.setAuthor(new UserBean("autor",""));
-		review.setCreator(new UserBean("creator",""));
-		review.setDescription("description");
-		review.setModerator(new UserBean("moderator",""));
-		review.setName("name");
-		review.setProjectKey("PR");
-		return review;
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/api/HtmlCrucibleStatusListenerTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/api/HtmlCrucibleStatusListenerTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/api/HtmlCrucibleStatusListenerTest.java	(working copy)
@@ -1,80 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible.api;
-
-import com.atlassian.theplugin.commons.crucible.CrucibleStatusDisplay;
-import com.gargoylesoftware.htmlunit.StringWebResponse;
-import com.gargoylesoftware.htmlunit.TopLevelWindow;
-import com.gargoylesoftware.htmlunit.WebClient;
-import com.gargoylesoftware.htmlunit.html.HTMLParser;
-import com.gargoylesoftware.htmlunit.html.HtmlPage;
-import com.gargoylesoftware.htmlunit.html.HtmlTable;
-import junit.framework.Assert;
-
-import java.io.IOException;
-import java.util.List;
-
-class StatusListenerResultCatcher implements CrucibleStatusDisplay {
-	public String htmlPage;
-	public ResponseWrapper response;
-
-	public int count;
-
-    public String getHtmlPage()
-    {
-        return htmlPage;
-    }
-
-	public void updateCrucibleStatus(String htmlPage) {
-
-		this.htmlPage = htmlPage;
-
-		++count;
-
-		try {
-			response = new ResponseWrapper(htmlPage);
-		} catch (IOException e) {
-			throw new RuntimeException(e);
-		}
-	}
-}
-
-class ResponseWrapper {
-	private HtmlPage thePage;
-	private HtmlTable theTable;
-
-	ResponseWrapper(String htmlPage) throws IOException {
-		StringWebResponse swr = new StringWebResponse(htmlPage);
-		WebClient wc = new WebClient();
-		thePage = HTMLParser.parse(swr, new TopLevelWindow("", wc));
-	}
-
-	public HtmlPage getPage() {
-		return thePage;
-	}
-
-
-	public HtmlTable getTheTable() throws Exception {
-		if (theTable == null) {
-			List tables = thePage.getByXPath("html/body/table");
-			Assert.assertEquals(1, tables.size());
-			theTable = (HtmlTable) tables.get(0);
-		}
-		return theTable;
-	}
-
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/CrucibleServerFacadeConnectionTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/CrucibleServerFacadeConnectionTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/CrucibleServerFacadeConnectionTest.java	(working copy)
@@ -1,143 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible;
-
-import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
-import com.atlassian.theplugin.commons.cfg.ServerId;
-import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
-import com.atlassian.theplugin.commons.configuration.PluginConfigurationBean;
-import com.atlassian.theplugin.commons.crucible.CrucibleServerFacade;
-import com.atlassian.theplugin.commons.crucible.CrucibleServerFacadeImpl;
-import com.atlassian.theplugin.commons.crucible.api.CrucibleLoginException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginFailedException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiMalformedUrlException;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.LoginCallback;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.VersionInfoCallback;
-import junit.framework.TestCase;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-
-public class CrucibleServerFacadeConnectionTest extends TestCase {
-	private static final String USER_NAME = "someUser";
-	private static final String PASSWORD = "somePassword";
-
-	private org.mortbay.jetty.Server httpServer;
-	private JettyMockServer mockServer;
-	private String mockBaseUrl;
-	public static final String INVALID_PROJECT_KEY = "INVALID project key";
-	private CrucibleServerFacade testedCrucibleServerFacade;
-	private CrucibleServerCfg crucibleServerCfg;
-
-	@Override
-	protected void setUp() throws Exception {
-		httpServer = new org.mortbay.jetty.Server(0);
-		httpServer.start();
-
-		mockBaseUrl = "http://localhost:" + httpServer.getConnectors()[0].getLocalPort();
-
-		mockServer = new JettyMockServer(httpServer);
-		crucibleServerCfg = createCrucibleTestConfiguration(mockBaseUrl, true);
-		testedCrucibleServerFacade = CrucibleServerFacadeImpl.getInstance();
-		ConfigurationFactory.setConfiguration(new PluginConfigurationBean());
-	}
-
-	private static CrucibleServerCfg createCrucibleTestConfiguration(String serverUrl, boolean isPassInitialized) {
-		final CrucibleServerCfg res = new CrucibleServerCfg("TestServer", new ServerId());
-
-		res.setUrl(serverUrl);
-		res.setUsername(USER_NAME);
-
-		res.setPassword(isPassInitialized ? PASSWORD : ""); //, isPassInitialized);
-		// TODO wseliga how to handle it???
-		// server.transientSetIsConfigInitialized(isPassInitialized);
-		return res;
-	}
-
-	@Override
-	protected void tearDown() throws Exception {
-		mockServer = null;
-		mockBaseUrl = null;
-		httpServer.stop();
-
-		testedCrucibleServerFacade = null;
-	}
-
-	public void testFailedLoginGetAllReviews() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD, LoginCallback.ALWAYS_FAIL));
-
-		try {
-			testedCrucibleServerFacade.getAllReviews(crucibleServerCfg);
-			fail();
-		} catch (RemoteApiLoginFailedException e) {
-
-		}
-
-		mockServer.verify();
-	}
-
-	public void testConnectionTestSucceed() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1/versionInfo", new VersionInfoCallback(true));
-		testedCrucibleServerFacade.testServerConnection(mockBaseUrl, USER_NAME, PASSWORD);
-		mockServer.verify();
-	}
-
-	public void testConnectionTestFailed() throws Exception {
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(USER_NAME, PASSWORD));
-		mockServer.expect("/rest-service/reviews-v1/versionInfo", new VersionInfoCallback(false));
-
-		try {
-			testedCrucibleServerFacade.testServerConnection(mockBaseUrl, USER_NAME, PASSWORD);
-			fail();
-		} catch (RemoteApiLoginFailedException e) {
-			// expected
-		} catch (CrucibleLoginException e) {
-			// expected
-		}
-
-		mockServer.verify();
-	}
-
-	public void testConnectionTestFailedNullUser() throws Exception {
-		try {
-			testedCrucibleServerFacade.testServerConnection(mockBaseUrl, null, PASSWORD);
-			fail();
-		} catch (RemoteApiLoginException e) {
-			// expected
-		}
-	}
-
-	public void testConnectionTestFailedNullPassword() throws Exception {
-		try {
-			testedCrucibleServerFacade.testServerConnection(mockBaseUrl, USER_NAME, null);
-			fail();
-		} catch (RemoteApiLoginException e) {
-			// expected
-		}
-	}
-
-	public void testConnectionTestFailedEmptyUrl() throws Exception {
-
-		try {
-			testedCrucibleServerFacade.testServerConnection("", USER_NAME, PASSWORD);
-			fail();
-		} catch (RemoteApiMalformedUrlException e) {
-			// expected
-		}
-		mockServer.verify();
-	}
-}
\ No newline at end of file
Index: src/test/java/com/atlassian/theplugin/crucible/CrucibleServerFacadeTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/CrucibleServerFacadeTest.java	(revision 24154)
+++ src/test/java/com/atlassian/theplugin/crucible/CrucibleServerFacadeTest.java	(working copy)
@@ -1,764 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible;
-
-import com.atlassian.theplugin.commons.VirtualFileSystem;
-import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
-import com.atlassian.theplugin.commons.cfg.ServerId;
-import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
-import com.atlassian.theplugin.commons.configuration.PluginConfigurationBean;
-import com.atlassian.theplugin.commons.crucible.CrucibleServerFacade;
-import com.atlassian.theplugin.commons.crucible.CrucibleServerFacadeImpl;
-import com.atlassian.theplugin.commons.crucible.ValueNotYetInitialized;
-import com.atlassian.theplugin.commons.crucible.api.CrucibleSession;
-import com.atlassian.theplugin.commons.crucible.api.model.*;
-import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
-import com.atlassian.theplugin.commons.remoteapi.RemoteApiLoginException;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.LoginCallback;
-import com.atlassian.theplugin.crucible.api.rest.cruciblemock.VersionInfoCallback;
-import junit.framework.TestCase;
-import org.ddsteps.mock.httpserver.JettyMockServer;
-import org.easymock.EasyMock;
-import static org.easymock.EasyMock.createMock;
-import static org.easymock.EasyMock.replay;
-import org.mortbay.jetty.Server;
-
-import java.lang.reflect.Field;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-
-public class CrucibleServerFacadeTest extends TestCase {
-    private static final User VALID_LOGIN = new UserBean("validLogin");
-    private static final String VALID_PASSWORD = "validPassword";
-    private static final String VALID_URL = "http://localhost:9001";
-
-    private CrucibleServerFacade facade;
-    private CrucibleSession crucibleSessionMock;
-    public static final String INVALID_PROJECT_KEY = "INVALID project key";
-
-    @SuppressWarnings("unchecked")
-    protected void setUp() {
-        ConfigurationFactory.setConfiguration(new PluginConfigurationBean());
-
-        crucibleSessionMock = createMock(CrucibleSession.class);
-
-        facade = CrucibleServerFacadeImpl.getInstance();
-
-        try {
-            Field f = CrucibleServerFacadeImpl.class.getDeclaredField("sessions");
-            f.setAccessible(true);
-
-            ((Map<String, CrucibleSession>) f.get(facade)).put(VALID_URL + VALID_LOGIN.getUserName() + VALID_PASSWORD, crucibleSessionMock);
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public void testConnectionTestFailedBadPassword() throws Exception {
-
-        Server server = new Server(0);
-        server.start();
-
-        String mockBaseUrl = "http://localhost:" + server.getConnectors()[0].getLocalPort();
-        JettyMockServer mockServer = new JettyMockServer(server);
-        mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(VALID_LOGIN.getUserName(), VALID_PASSWORD, LoginCallback.ALWAYS_FAIL));
-
-        try {
-            facade.testServerConnection(mockBaseUrl, VALID_LOGIN.getUserName(), VALID_PASSWORD);
-            fail("testServerConnection failed");
-        } catch (RemoteApiException e) {
-            //
-        }
-
-        mockServer.verify();
-        server.stop();
-    }
-
-	public void testConnectionTestFailedCru15() throws Exception {
-		Server server = new Server(0);
-		server.start();
-
-		String mockBaseUrl = "http://localhost:" + server.getConnectors()[0].getLocalPort();
-		JettyMockServer mockServer = new JettyMockServer(server);
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(VALID_LOGIN.getUserName(), VALID_PASSWORD, false));
-		mockServer.expect("/rest-service/reviews-v1/versionInfo", new VersionInfoCallback(false));
-
-		try {
-			facade.testServerConnection(mockBaseUrl, VALID_LOGIN.getUserName(), VALID_PASSWORD);
-			fail("testServerConnection failed");
-		} catch (RemoteApiException e) {
-		}
-
-		mockServer.verify();
-		server.stop();
-	}
-
-	public void testConnectionTestSucceed() throws Exception {
-        Server server = new Server(0);
-        server.start();
-
-        String mockBaseUrl = "http://localhost:" + server.getConnectors()[0].getLocalPort();
-        JettyMockServer mockServer = new JettyMockServer(server);
-
-		mockServer.expect("/rest-service/auth-v1/login", new LoginCallback(VALID_LOGIN.getUserName(), VALID_PASSWORD, false));
-		mockServer.expect("/rest-service/reviews-v1/versionInfo", new VersionInfoCallback(true));
-
-        try {
-            facade.testServerConnection(mockBaseUrl, VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiException e) {
-            fail("testServerConnection failed");
-        }
-
-        mockServer.verify();
-        server.stop();
-    }
-
-
-    @SuppressWarnings("unchecked")
-    Map<String, CrucibleSession> getSessionsFromFacade() {
-        Field f;
-        try {
-            f = CrucibleServerFacadeImpl.class.getDeclaredField("sessions");
-            f.setAccessible(true);
-            return (Map)f.get(facade);
-        } catch (NoSuchFieldException e) {
-            throw new RuntimeException(e);
-        } catch (IllegalAccessException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public void testChangedCredentials() throws Exception {
-        User validLogin2 = new UserBean(VALID_LOGIN.getUserName() + 2);
-        String validPassword2 = VALID_PASSWORD + 2;
-        getSessionsFromFacade().put(VALID_URL + validLogin2.getUserName() + validPassword2, crucibleSessionMock);
-
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        PermId permId = new PermId() {
-            public String getId() {
-                return "permId";
-            }
-        };
-
-        Review review = prepareReviewData(VALID_LOGIN, "name", State.DRAFT, permId);
-
-        crucibleSessionMock.getAllReviews(true);
-        EasyMock.expectLastCall().andReturn(Arrays.asList(review, review));
-
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(validLogin2.getUserName(), validPassword2);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        Review review2 = prepareReviewData(validLogin2, "name", State.DRAFT, permId);
-        crucibleSessionMock.getAllReviews(true);
-        EasyMock.expectLastCall().andReturn(Arrays.asList(review2));
-
-        replay(crucibleSessionMock);
-
-        CrucibleServerCfg server = prepareServerBean();
-        List<Review> ret = facade.getAllReviews(server);
-        assertEquals(2, ret.size());
-        assertEquals(permId.getId(), ret.get(0).getPermId().getId());
-        assertEquals("name", ret.get(0).getName());
-        assertEquals(VALID_LOGIN, ret.get(0).getAuthor());
-        assertEquals(VALID_LOGIN, ret.get(0).getCreator());
-        assertEquals("Test description", ret.get(0).getDescription());
-        assertEquals(VALID_LOGIN, ret.get(0).getModerator());
-        assertEquals("TEST", ret.get(0).getProjectKey());
-        assertEquals(null, ret.get(0).getRepoName());
-        assertSame(State.DRAFT, ret.get(0).getState());
-        assertNull(ret.get(0).getParentReview());
-
-        server.setUsername(validLogin2.getUserName());
-        server.setPassword(validPassword2);
-        ret = facade.getAllReviews(server);
-        assertEquals(1, ret.size());
-        assertEquals(permId.getId(), ret.get(0).getPermId().getId());
-        assertEquals("name", ret.get(0).getName());
-        assertEquals(validLogin2, ret.get(0).getAuthor());
-        assertEquals(validLogin2, ret.get(0).getCreator());
-        assertEquals("Test description", ret.get(0).getDescription());
-        assertEquals(validLogin2, ret.get(0).getModerator());
-        assertEquals("TEST", ret.get(0).getProjectKey());
-        assertEquals(null, ret.get(0).getRepoName());
-        assertSame(State.DRAFT, ret.get(0).getState());
-        assertNull(ret.get(0).getParentReview());
-
-        EasyMock.verify(crucibleSessionMock);
-    }
-
-    public void testCreateReview() throws Exception {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        crucibleSessionMock.createReview(EasyMock.isA(Review.class));
-		CrucibleServerCfg server = prepareServerBean();
-        Review response = new ReviewBean(server.getUrl());
-
-        EasyMock.expectLastCall().andReturn(response);
-
-        replay(crucibleSessionMock);
-
-        Review review = prepareReviewData("name", State.DRAFT);
-
-        // test call
-        Review ret = facade.createReview(server, review);
-        assertSame(response, ret);
-
-        EasyMock.verify(crucibleSessionMock);
-
-
-    }
-
-    public void testCreateReviewWithInvalidProjectKey() throws Exception {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        crucibleSessionMock.createReview(EasyMock.isA(Review.class));
-
-        EasyMock.expectLastCall().andThrow(new RemoteApiException("test"));
-
-        replay(crucibleSessionMock);
-
-        CrucibleServerCfg server = prepareServerBean();
-        Review review = prepareReviewData("name", State.DRAFT);
-
-        try {
-            // test call
-            facade.createReview(server, review);
-            fail("creating review with invalid key should throw an CrucibleException()");
-        } catch (RemoteApiException e) {
-
-        } finally {
-            EasyMock.verify(crucibleSessionMock);
-        }
-
-    }
-
-    public void testCreateReviewFromPatch() throws ServerPasswordNotProvidedException, RemoteApiException {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        crucibleSessionMock.createReviewFromPatch(EasyMock.isA(Review.class), EasyMock.eq("some patch"));
-		CrucibleServerCfg server = prepareServerBean();
-        Review response = new ReviewBean(server.getUrl());
-        EasyMock.expectLastCall().andReturn(response);
-
-        replay(crucibleSessionMock);
-
-        Review review = prepareReviewData("name", State.DRAFT);
-
-        String patch = "some patch";
-
-        // test call
-        Review ret = facade.createReviewFromPatch(server, review, patch);
-        assertSame(response, ret);
-
-        EasyMock.verify(crucibleSessionMock);
-    }
-
-    public void testCreateReviewFromPatchWithInvalidProjectKey() throws Exception {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        crucibleSessionMock.createReviewFromPatch(EasyMock.isA(Review.class), EasyMock.eq("some patch"));
-        EasyMock.expectLastCall().andThrow(new RemoteApiException("test"));
-
-        replay(crucibleSessionMock);
-
-        CrucibleServerCfg server = prepareServerBean();
-        Review review = prepareReviewData("name", State.DRAFT);
-
-        String patch = "some patch";
-
-        try {
-            facade.createReviewFromPatch(server, review, patch);
-            fail("creating review with patch with invalid key should throw an RemoteApiException()");
-        } catch (RemoteApiException e) {
-            // ignored by design
-        } finally {
-            EasyMock.verify(crucibleSessionMock);
-        }
-    }
-
-    public void testGetAllReviews() throws ServerPasswordNotProvidedException, RemoteApiException {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-
-        PermId permId = new PermId() {
-            public String getId() {
-                return "permId";
-            }
-        };
-
-        Review review = prepareReviewData(VALID_LOGIN, "name", State.DRAFT, permId);
-
-        crucibleSessionMock.getAllReviews(true);
-        EasyMock.expectLastCall().andReturn(Arrays.asList(review, review));
-
-        replay(crucibleSessionMock);
-
-        CrucibleServerCfg server = prepareServerBean();
-        // test call
-        List<Review> ret = facade.getAllReviews(server);
-        assertEquals(2, ret.size());
-        assertEquals(permId.getId(), ret.get(0).getPermId().getId());
-        assertEquals("name", ret.get(0).getName());
-        assertEquals(VALID_LOGIN, ret.get(0).getAuthor());
-        assertEquals(VALID_LOGIN, ret.get(0).getCreator());
-        assertEquals("Test description", ret.get(0).getDescription());
-        assertEquals(VALID_LOGIN, ret.get(0).getModerator());
-        assertEquals("TEST", ret.get(0).getProjectKey());
-        assertEquals(null, ret.get(0).getRepoName());
-        assertSame(State.DRAFT, ret.get(0).getState());
-        assertNull(ret.get(0).getParentReview());
-
-        EasyMock.verify(crucibleSessionMock);
-    }
-
-    public void testGetProjects() throws ServerPasswordNotProvidedException, RemoteApiException {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-		} catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-		crucibleSessionMock.getProjects();
-        EasyMock.expectLastCall().andReturn(Arrays.asList(prepareProjectData(0), prepareProjectData(1)));
-        replay(crucibleSessionMock);
-
-        CrucibleServerCfg server = prepareServerBean();
-        // test call
-		List<Project> ret = facade.getProjects(server);
-        assertEquals(2, ret.size());
-        for (int i = 0; i < 2; i++) {
-            String id = Integer.toString(i);
-            assertEquals(id, ret.get(i).getId());
-            assertEquals("CR" + id, ret.get(i).getKey());
-            assertEquals("Name" + id, ret.get(i).getName());
-        }
-        EasyMock.verify(crucibleSessionMock);
-    }
-
-    public void testGetRepositories() throws ServerPasswordNotProvidedException, RemoteApiException {
-        crucibleSessionMock.isLoggedIn();
-        EasyMock.expectLastCall().andReturn(false);
-        try {
-            crucibleSessionMock.login(VALID_LOGIN.getUserName(), VALID_PASSWORD);
-        } catch (RemoteApiLoginException e) {
-            fail("recording mock failed for login");
-        }
-        crucibleSessionMock.getRepositories();
-        EasyMock.expectLastCall().andReturn(Arrays.asList(prepareRepositoryData(0), prepareRepositoryData(1)));
-        replay(crucibleSessionMock);
-
-        CrucibleServerCfg server = prepareServerBean();
-        // test call
-        List<Repository> ret = facade.getRepositories(server);
-        assertEquals(2, ret.size());
-        for (int i = 0; i < 2; i++) {
-            String id = Integer.toString(i);
-            assertEquals("RepoName" + id, ret.get(i).getName());
-        }
-        EasyMock.verify(crucibleSessionMock);
-    }
-
-    private Review prepareReviewData(final String name, final State state) {
-        return new ReviewBean(null) {
-            public User getAuthor() {
-                return VALID_LOGIN;
-            }
-
-            public User getCreator() {
-                return VALID_LOGIN;
-            }
-
-            public String getDescription() {
-                return "Test description";
-            }
-
-            public User getModerator() {
-                return VALID_LOGIN;
-            }
-
-            public String getName() {
-                return name;
-            }
-
-            public PermId getParentReview() {
-                return null;
-            }
-
-            public PermId getPermId() {
-                return new PermId() {
-                    public String getId() {
-                        return "permId";
-                    }
-                };
-            }
-
-            public String getProjectKey() {
-                return "TEST";
-            }
-
-            public String getRepoName() {
-                return null;
-            }
-
-            public State getState() {
-                return state;
-            }
-
-            public boolean isAllowReviewerToJoin() {
-                return false;
-            }
-
-            public int getMetricsVersion() {
-                return 0;
-            }
-
-            public Date getCreateDate() {
-                return null;
-            }
-
-            public Date getCloseDate() {
-                return null;
-            }
-
-            public String getSummary() {
-                return null;
-            }
-
-            public List<Reviewer> getReviewers() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public List<GeneralComment> getGeneralComments() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public List<VersionedComment> getVersionedComments() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public List<CrucibleFileInfo> getFiles() {
-                return null;
-            }
-
-            public List<Action> getTransitions() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public List<Action> getActions() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public VirtualFileSystem getVirtualFileSystem() {
-                return null;
-            }
-
-			public CrucibleServerCfg getServer() {
-				return null;
-			}
-
-			public String getReviewUrl() {
-				return null;
-			}
-
-			public Review getInnerReviewObject() {
-				return this;
-			}
-
-			public void setGeneralComments(final List<GeneralComment> generalComments) {
-				// not implemented
-			}
-
-			public void removeGeneralComment(final GeneralComment comment) {
-				// not implemented
-			}
-
-			public void removeVersionedComment(final VersionedComment vComment, final CrucibleFileInfo file) {
-				// not implemented
-			}
-
-			public void setFilesAndVersionedComments(final List<CrucibleFileInfo> files, final List<VersionedComment> commentList) {
-
-			}
-
-			public CrucibleFileInfo getFileByPermId(PermId id) {
-				return null;
-			}
-
-			public String getServerUrl() {
-				return null;
-			}
-		};
-    }
-
-    private Review prepareReviewData(final User user, final String name, final State state, final PermId permId) {
-        return new ReviewBean(null) {
-            public User getAuthor() {
-                return user;
-            }
-
-            public User getCreator() {
-                return user;
-            }
-
-            public String getDescription() {
-                return "Test description";
-            }
-
-            public User getModerator() {
-                return user;
-            }
-
-            public String getName() {
-                return name;
-            }
-
-            public PermId getParentReview() {
-                return null;
-            }
-
-            public PermId getPermId() {
-                return permId;
-            }
-
-            public String getProjectKey() {
-                return "TEST";
-            }
-
-            public String getRepoName() {
-                return null;
-            }
-
-            public State getState() {
-                return state;
-            }
-
-            public boolean isAllowReviewerToJoin() {
-                return false;  
-            }
-
-            public int getMetricsVersion() {
-                return 0;
-            }
-
-            public Date getCreateDate() {
-                return null;
-            }
-
-            public Date getCloseDate() {
-                return null;
-            }
-
-            public String getSummary() {
-                return null;
-            }
-
-            public String getReviewUrl() {
-                return null;
-            }
-
-			public Review getInnerReviewObject() {
-				return null;
-			}
-
-			public void setGeneralComments(final List<GeneralComment> generalComments) {
-				// not implemented
-			}
-
-			public void removeGeneralComment(final GeneralComment comment) {
-				// not implemented
-			}
-
-			public void removeVersionedComment(final VersionedComment vComment, final CrucibleFileInfo file) {
-				// not implemented
-			}
-
-			public void setFilesAndVersionedComments(final List<CrucibleFileInfo> files, final List<VersionedComment> commentList) {
-
-			}
-
-			public List<Reviewer> getReviewers() {
-                return null;
-            }
-
-            public List<GeneralComment> getGeneralComments() {
-                return null;
-            }
-
-            public List<VersionedComment> getVersionedComments() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public List<CrucibleFileInfo> getFiles() {
-                return null;
-            }
-
-            public List<Action> getTransitions() {
-                return null;
-            }
-
-            public List<Action> getActions() throws ValueNotYetInitialized {
-                return null;
-            }
-
-            public VirtualFileSystem getVirtualFileSystem() {
-                return null;
-            }
-
-			public CrucibleServerCfg getServer() {
-				return null;
-			}
-
-			public CrucibleFileInfo getFileByPermId(PermId id) {
-				return null;
-			}
-
-			public String getServerUrl() {
-				return null;
-			}
-		};
-    }
-
-    private CrucibleServerCfg prepareServerBean() {
-        CrucibleServerCfg server = new CrucibleServerCfg("myname", new ServerId());
-        server.setUrl(VALID_URL);
-        server.setUsername(VALID_LOGIN.getUserName());
-        server.setPassword(VALID_PASSWORD);
-		server.setPasswordStored(false);
-        return server;
-    }
-
-    private Project prepareProjectData(final int i) {
-        return new Project() {
-            public String getId() {
-                return Integer.toString(i);
-            }
-
-            public String getKey() {
-                return "CR" + Integer.toString(i);
-            }
-
-            public String getName() {
-                return "Name" + Integer.toString(i);
-            }
-        };
-    }
-
-    private Repository prepareRepositoryData(final int i) {
-        return new Repository() {
-            public String getName() {
-                return "RepoName" + Integer.toString(i);
-            }
-
-            public String getType() {
-                return "svn";
-            }
-
-            public boolean isEnabled() {
-                return false;
-            }
-        };
-    }
-
-    public void _testCreateReviewHardcoded() throws ServerPasswordNotProvidedException {
-
-        //facade.setCrucibleSession(null);
-
-		CrucibleServerCfg server = prepareCrucibleServerCfg();
-
-		Review review = prepareReviewData("test", State.DRAFT);
-
-        Review ret;
-
-        try {
-            ret = facade.createReview(server, review);
-            assertNotNull(ret);
-            assertNotNull(ret.getPermId());
-            assertNotNull(ret.getPermId().getId());
-            assertTrue(ret.getPermId().getId().length() > 0);
-        } catch (RemoteApiException e) {
-            fail(e.getMessage());
-        }
-    }
-
-	private CrucibleServerCfg prepareCrucibleServerCfg() {
-		CrucibleServerCfg server = new CrucibleServerCfg("mycrucible", new ServerId());
-		server.setUrl("http://lech.atlassian.pl:8060");
-		server.setUsername("test");
-		server.setPassword("test");
-		server.setPasswordStored(false);
-		return server;
-	}
-
-	public void _testGetAllReviewsHardcoded() throws ServerPasswordNotProvidedException {
-        //facade.setCrucibleSession(null);
-		final CrucibleServerCfg server = prepareCrucibleServerCfg();
-
-        try {
-            List<Review> list = facade.getAllReviews(server);
-            assertNotNull(list);
-            assertTrue(list.size() > 0);
-        } catch (RemoteApiException e) {
-            fail(e.getMessage());
-        }
-    }
-}
Index: src/test/java/com/atlassian/theplugin/crucible/ReviewDataInfoImplTest.java
===================================================================
--- src/test/java/com/atlassian/theplugin/crucible/ReviewDataInfoImplTest.java	(revision 23960)
+++ src/test/java/com/atlassian/theplugin/crucible/ReviewDataInfoImplTest.java	(working copy)
@@ -1,79 +0,0 @@
-/**
- * Copyright (C) 2008 Atlassian
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.atlassian.theplugin.crucible;
-
-import com.atlassian.theplugin.commons.crucible.api.model.PermId;
-import com.atlassian.theplugin.commons.crucible.api.model.ReviewBean;
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-/**
- * RemoteReview Tester.
- */
-public class ReviewDataInfoImplTest extends TestCase {
-    public ReviewDataInfoImplTest(String name) {
-        super(name);
-    }
-
-    public void setUp() throws Exception {
-        super.setUp();
-    }
-
-    public void tearDown() throws Exception {
-        super.tearDown();
-    }
-
-    public void testSetGetReviewData() throws Exception {
-        //TODO: Test goes here...
-    }
-
-    public void testSetGetReviewers() throws Exception {
-        //TODO: Test goes here...
-    }
-
-    public void testGetServer() throws Exception {
-        //TODO: Test goes here...
-    }
-
-	public void testNotEquals() throws Exception {
-		ReviewBean r1 = new ReviewBean(null);
-        r1.setPermId(new PermId() {
-
-            public String getId() {
-                return new String("ID");
-            }
-        });
-		ReviewBean r2 = new ReviewBean(null);
-        r2.setPermId(new PermId() {
-
-            public String getId() {
-                return new String("ID-2");
-            }
-        });
-
-		assertEquals(r1, r1);
-
-		assertFalse(r1.equals(null));
-		assertFalse(r1.equals(r2));
-        assertFalse(r1.hashCode() == r2.hashCode());
-    }
-	
-	public static Test suite() {
-        return new TestSuite(ReviewDataInfoImplTest.class);
-    }
-}
